{
    "item": [
        {
            "id": "e6f0813c-d3ef-47a8-b12f-4681391346b5",
            "name": "Beacon",
            "description": {
                "content": "Set of endpoints to query beacon chain.",
                "type": "text/plain"
            },
            "item": [
                {
                    "id": "2468475a-fa73-41b3-b07e-96d91b31b2d7",
                    "name": "Retrieve details of the chain's genesis.",
                    "request": {
                        "name": "Retrieve details of the chain's genesis.",
                        "description": {
                            "content": "Retrieve details of the chain's genesis which can be used to identify chain.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "genesis"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "d7db337f-2674-4795-b196-8fd5ca6b7485",
                            "name": "Request successful",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "genesis"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"genesis_time\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"genesis_validators_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"genesis_fork_version\": \"0x00000000\"\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "925e5518-be30-4fcf-889c-6a3e15fdb518",
                            "name": "Chain genesis info is not yet known",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "genesis"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "2af6f3f3-9369-4b90-a563-bb18d74ed14f",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "genesis"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "8faa2bbe-2063-423f-9d55-09d08cc5c109",
                    "name": "Get state SSZ HashTreeRoot",
                    "request": {
                        "name": "Get state SSZ HashTreeRoot",
                        "description": {
                            "content": "Calculates HashTreeRoot for state with given 'stateId'. If stateId is root, same value will be returned.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "states",
                                ":state_id",
                                "root"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "state_id",
                                    "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "309c301c-2531-4d95-8b8a-da2c144c1ba1",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "root"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": {\n    \"root\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "416770cb-0343-4be5-bec9-324a39c89a36",
                            "name": "Invalid state ID",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "root"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "1eca1820-d89d-44d0-ae35-90b520f38274",
                            "name": "State not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "root"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"State not found\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "4569de75-ebaa-498a-adb5-ce9d0c522444",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "root"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "074df78d-e410-4144-a3c3-10fa1e288c12",
                    "name": "Get Fork object for requested state",
                    "request": {
                        "name": "Get Fork object for requested state",
                        "description": {
                            "content": "Returns [Fork](https://github.com/ethereum/consensus-specs/blob/v0.11.1/specs/phase0/beacon-chain.md#fork) object for state with given 'stateId'.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "states",
                                ":state_id",
                                "fork"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "state_id",
                                    "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "e6c3fc8f-eed8-4f7b-944f-98339cb2b9e8",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "fork"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": {\n    \"previous_version\": \"0x00000000\",\n    \"current_version\": \"0x00000000\",\n    \"epoch\": \"1\"\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "8bffec58-49a6-414d-bafb-ee47ed2e3608",
                            "name": "Invalid state ID",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "fork"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "24a2dbbc-ab09-46b7-83b5-34fa7aa1c8d8",
                            "name": "State not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "fork"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "d64c75b2-8df6-47d3-a480-a21a6c3061ec",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "fork"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "232b8de0-a81a-49d6-abe8-bb5cf3aa4019",
                    "name": "Get state finality checkpoints",
                    "request": {
                        "name": "Get state finality checkpoints",
                        "description": {
                            "content": "Returns finality checkpoints for state with given 'stateId'.\nIn case finality is not yet achieved, checkpoint should return epoch 0 and ZERO_HASH as root.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "states",
                                ":state_id",
                                "finality_checkpoints"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "state_id",
                                    "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "a5d57ad7-1965-4424-86ff-ab17b1f6a572",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "finality_checkpoints"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": {\n    \"previous_justified\": {\n      \"epoch\": \"1\",\n      \"root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"\n    },\n    \"current_justified\": {\n      \"epoch\": \"1\",\n      \"root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"\n    },\n    \"finalized\": {\n      \"epoch\": \"1\",\n      \"root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "cd9785aa-c005-462b-afd0-4e339bd5052d",
                            "name": "Invalid state ID",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "finality_checkpoints"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "9fdd9bee-8169-422a-bd41-7ef1bd2693b5",
                            "name": "State not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "finality_checkpoints"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "4114291f-4403-4201-bec9-665a855aa44b",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "finality_checkpoints"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f70da1b1-3d7a-4414-8004-b31df91deedb",
                    "name": "Get validators from state",
                    "request": {
                        "name": "Get validators from state",
                        "description": {
                            "content": "Returns filterable list of validators with their balance, status and index.\n\nInformation will be returned for all indices or public key that match known validators.  If an index or public key does not\nmatch any known validator, no information will be returned but this will not cause an error.  There are no guarantees for the\nreturned data in terms of ordering; both the index and public key are returned for each validator, and can be used to confirm\nfor which inputs a response has been returned.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "states",
                                ":state_id",
                                "validators"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "id",
                                    "value": "<string>",
                                    "description": "Either hex encoded public key (any bytes48 with 0x prefix) or validator index"
                                },
                                {
                                    "disabled": false,
                                    "key": "status",
                                    "value": "esse aute sunt",
                                    "description": "[Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)"
                                },
                                {
                                    "disabled": false,
                                    "key": "status",
                                    "value": "nostrud reprehenderit laborum",
                                    "description": "[Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)"
                                }
                            ],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "state_id",
                                    "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "21ae030e-e658-462e-88fc-aa3324b70fe9",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validators"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "id",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "status",
                                            "value": "aliqua anim nisi sit"
                                        },
                                        {
                                            "key": "status",
                                            "value": "consectetur sunt incididunt do"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": [\n    {\n      \"index\": {},\n      \"balance\": {},\n      \"status\": \"in deserunt enim\",\n      \"validator\": {\n        \"pubkey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"withdrawal_credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"effective_balance\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"slashed\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"activation_eligibility_epoch\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"activation_epoch\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"exit_epoch\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"withdrawable_epoch\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"index\": {},\n      \"balance\": {},\n      \"status\": \"et ipsum officia sed in\",\n      \"validator\": {\n        \"pubkey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"withdrawal_credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"effective_balance\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"slashed\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"activation_eligibility_epoch\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"activation_epoch\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"exit_epoch\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"withdrawable_epoch\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "51dff561-c4ee-4e27-b114-c3898b2f8a29",
                            "name": "Invalid state or validator ID, or status",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validators"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "id",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "status",
                                            "value": "aliqua anim nisi sit"
                                        },
                                        {
                                            "key": "status",
                                            "value": "consectetur sunt incididunt do"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "ae053630-0cdb-46ef-bea5-1b0f05a83017",
                            "name": "State not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validators"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "id",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "status",
                                            "value": "aliqua anim nisi sit"
                                        },
                                        {
                                            "key": "status",
                                            "value": "consectetur sunt incididunt do"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "a440e473-f460-4ee5-844d-f792be52bf94",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validators"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "id",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "status",
                                            "value": "aliqua anim nisi sit"
                                        },
                                        {
                                            "key": "status",
                                            "value": "consectetur sunt incididunt do"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "1dca678a-4fd5-4b50-8745-447943333988",
                    "name": "Get validator from state by id",
                    "request": {
                        "name": "Get validator from state by id",
                        "description": {
                            "content": "Returns validator specified by state and id or public key along with status and balance.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "states",
                                ":state_id",
                                "validators",
                                ":validator_id"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "state_id",
                                    "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "validator_id",
                                    "description": "(Required) Either hex encoded public key (any bytes48 with 0x prefix) or validator index"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "2e7284c6-e7f0-41f9-aa83-f5d59823e380",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validators",
                                        ":validator_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "validator_id",
                                            "description": "(Required) Either hex encoded public key (any bytes48 with 0x prefix) or validator index"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": {\n    \"index\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"balance\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"status\": \"minim\",\n    \"validator\": {\n      \"pubkey\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"withdrawal_credentials\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"effective_balance\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"slashed\": false,\n      \"activation_eligibility_epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"activation_epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"exit_epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"withdrawable_epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "3cbacf58-972a-4cb0-896c-78cd0d95fce8",
                            "name": "Invalid state or validator ID",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validators",
                                        ":validator_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "validator_id",
                                            "description": "(Required) Either hex encoded public key (any bytes48 with 0x prefix) or validator index"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "21fb3503-40e9-453f-a88c-dc101bf933b9",
                            "name": "Not Found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validators",
                                        ":validator_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "validator_id",
                                            "description": "(Required) Either hex encoded public key (any bytes48 with 0x prefix) or validator index"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"State not found\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "83803960-5c8b-4a18-83e5-c201e92d1bf1",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validators",
                                        ":validator_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "validator_id",
                                            "description": "(Required) Either hex encoded public key (any bytes48 with 0x prefix) or validator index"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6e30eb49-b2ff-4336-b5f7-8aea520a9a33",
                    "name": "Get validator balances from state",
                    "request": {
                        "name": "Get validator balances from state",
                        "description": {
                            "content": "Returns filterable list of validators balances.\n\nBalances will be returned for all indices or public key that match known validators.  If an index or public key does not\nmatch any known validator, no balance will be returned but this will not cause an error.  There are no guarantees for the\nreturned data in terms of ordering; the index and is returned for each balance, and can be used to confirm for which inputs a\nresponse has been returned.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "states",
                                ":state_id",
                                "validator_balances"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "id",
                                    "value": "<string>",
                                    "description": "Either hex encoded public key (any bytes48 with 0x prefix) or validator index"
                                }
                            ],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "state_id",
                                    "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "0d137cc6-e1af-4991-88bf-2e2b89df7753",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validator_balances"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "id",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": [\n    {\n      \"index\": {},\n      \"balance\": {}\n    },\n    {\n      \"index\": {},\n      \"balance\": {}\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "ec3b9216-16c6-4c55-9044-88866eb422b1",
                            "name": "Invalid state or validator ID",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validator_balances"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "id",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "936c2232-a9b2-4ade-84d8-d7dac9a09835",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validator_balances"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "id",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "28d86524-1068-4c84-8262-e758e7bb325d",
                    "name": "Get all committees for a state.",
                    "request": {
                        "name": "Get all committees for a state.",
                        "description": {
                            "content": "Retrieves the committees for the given state.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "states",
                                ":state_id",
                                "committees"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "value",
                                    "value": "<Error: Could not resolve allOf schema",
                                    "description": "Fetch committees for the given epoch.  If not present then the committees for the epoch of the state will be obtained."
                                },
                                {
                                    "disabled": false,
                                    "key": "value",
                                    "value": "<Error: Could not resolve allOf schema",
                                    "description": "Restrict returned values to those matching the supplied committee index."
                                },
                                {
                                    "disabled": false,
                                    "key": "value",
                                    "value": "<Error: Could not resolve allOf schema",
                                    "description": "Restrict returned values to those matching the supplied slot."
                                }
                            ],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "state_id",
                                    "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "cbe4d79f-1acd-46c8-a509-8af54b9fe859",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        },
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        },
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": [\n    {\n      \"index\": {},\n      \"slot\": \"1\",\n      \"validators\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    {\n      \"index\": {},\n      \"slot\": \"1\",\n      \"validators\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "30d50005-d7ea-4a3c-813b-e733322a9a57",
                            "name": "Invalid state ID, index, epoch, slot, or combination thereof",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        },
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        },
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "475c5b78-1582-48d4-afdf-f6e0cbd8f68f",
                            "name": "State not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        },
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        },
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"State not found\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "a9e05840-43c1-4491-872f-a3a4aead5505",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        },
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        },
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "1f082747-3d2e-486a-9484-d967f8ed1e45",
                    "name": "Get sync committees for a state.",
                    "request": {
                        "name": "Get sync committees for a state.",
                        "description": {
                            "content": "Retrieves the sync committees for the given state.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "states",
                                ":state_id",
                                "sync_committees"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "value",
                                    "value": "<Error: Could not resolve allOf schema",
                                    "description": "Fetch sync committees for the given epoch.  If not present then the sync committees for the epoch of the state will be obtained."
                                }
                            ],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "state_id",
                                    "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "9a9682be-a5d4-4778-acbd-43893e7d4f88",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "sync_committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": {\n    \"validators\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "ebb284f3-9195-48c7-a3da-7065f1898a43",
                            "name": "Invalid state ID or epoch",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "sync_committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "0ce6a9ad-a632-4583-b607-5ba9ca193558",
                            "name": "State not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "sync_committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"State not found\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "56f70df0-1a80-4935-9479-6a2db00384b8",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "sync_committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "0e5d9442-bbc4-4a0f-bfd8-224034f54fde",
                    "name": "Get block headers",
                    "request": {
                        "name": "Get block headers",
                        "description": {
                            "content": "Retrieves block headers matching given query. By default it will fetch current head slot blocks.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "headers"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "value",
                                    "value": "<Error: Could not resolve allOf schema"
                                },
                                {
                                    "disabled": false,
                                    "key": "value",
                                    "value": "<Error: Could not resolve allOf schema"
                                }
                            ],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "c164b98f-9042-4d87-bc40-5a2237305155",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "headers"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        },
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": [\n    {\n      \"root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n      \"canonical\": false,\n      \"header\": {\n        \"message\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signature\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n      \"canonical\": false,\n      \"header\": {\n        \"message\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signature\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "eca3e56d-65ec-4075-ad6e-45fa74d9bbd6",
                            "name": "The block ID supplied could not be parsed",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "headers"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        },
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "6d41a2e5-ab9e-4334-84ba-2761008a3cf3",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "headers"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        },
                                        {
                                            "key": "value",
                                            "value": "<Error: Could not resolve allOf schema"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "7b4169f0-9f23-4a0e-8a0d-e065cd749997",
                    "name": "Get block header",
                    "request": {
                        "name": "Get block header",
                        "description": {
                            "content": "Retrieves block header for given block id.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "headers",
                                ":block_id"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "block_id",
                                    "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "2e094050-92cb-40ee-a5ec-4de9a51c9789",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "headers",
                                        ":block_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": {\n    \"root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"canonical\": false,\n    \"header\": {\n      \"message\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "d6695923-05c4-45f3-be34-147b9c4ee7dc",
                            "name": "The block ID supplied could not be parsed",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "headers",
                                        ":block_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "add7d236-a9e3-4209-9d9a-e701c6ccd6e4",
                            "name": "Block not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "headers",
                                        ":block_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "1b694c21-c278-4038-8a19-90c2d5938d7b",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "headers",
                                        ":block_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f13cb285-8e47-4dae-936f-6bdb130f1165",
                    "name": "Publish a signed block.",
                    "request": {
                        "name": "Publish a signed block.",
                        "description": {
                            "content": "Instructs the beacon node to use the components of the `SignedBlindedBeaconBlock` to construct and publish a \n`SignedBeaconBlock` by swapping out the `transactions_root` for the corresponding full list of `transactions`.\nThe beacon node should broadcast a newly constructed `SignedBeaconBlock` to the beacon network,\nto be included in the beacon chain. The beacon node is not required to validate the signed\n`BeaconBlock`, and a successful response (20X) only indicates that the broadcast has been\nsuccessful. The beacon node is expected to integrate the new block into its state, and\ntherefore validate the block internally, however blocks which fail the validation are still\nbroadcast but a different status code is returned (202). Pre-Bellatrix, this endpoint will accept \na `SignedBeaconBlock`.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "blinded_blocks"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "disabled": false,
                                "description": "Version of the block being submitted, if using SSZ encoding.",
                                "key": "Eth-Consensus-Version",
                                "value": "minim"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"message\": {\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"signature\": \"<string>\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "0d26a05b-5b61-4042-b43e-2303b6ae665d",
                            "name": "The block was validated successfully and has been broadcast. It has also been integrated into the beacon node's database.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blinded_blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "disabled": false,
                                        "description": "Version of the block being submitted, if using SSZ encoding.",
                                        "key": "Eth-Consensus-Version",
                                        "value": "pariatur"
                                    }
                                ],
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"message\": {\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "87aca68c-5f1c-4654-8ffd-cfbe0d4681d8",
                            "name": "The block failed validation, but was successfully broadcast anyway. It was not integrated into the beacon node's database.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blinded_blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "disabled": false,
                                        "description": "Version of the block being submitted, if using SSZ encoding.",
                                        "key": "Eth-Consensus-Version",
                                        "value": "pariatur"
                                    }
                                ],
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"message\": {\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Accepted",
                            "code": 202,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "7133ae0d-786c-4af4-ab01-caf79ecb1f6f",
                            "name": "The `SignedBlindedBeaconBlock` object is invalid",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blinded_blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "disabled": false,
                                        "description": "Version of the block being submitted, if using SSZ encoding.",
                                        "key": "Eth-Consensus-Version",
                                        "value": "pariatur"
                                    }
                                ],
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"message\": {\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "692f77b4-d379-4c3f-b979-11713b3d321a",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blinded_blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "disabled": false,
                                        "description": "Version of the block being submitted, if using SSZ encoding.",
                                        "key": "Eth-Consensus-Version",
                                        "value": "pariatur"
                                    }
                                ],
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"message\": {\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "b7c73183-34fd-4b78-9215-1c85dbff6686",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blinded_blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "disabled": false,
                                        "description": "Version of the block being submitted, if using SSZ encoding.",
                                        "key": "Eth-Consensus-Version",
                                        "value": "pariatur"
                                    }
                                ],
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"message\": {\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "2aecad9f-eb47-4841-8c66-12a64a4e5064",
                    "name": "Get block",
                    "request": {
                        "name": "Get block",
                        "description": {
                            "content": "Retrieves block details for given block id.\nDepending on `Accept` header it can be returned either as json or as bytes serialized by SSZ\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v2",
                                "beacon",
                                "blocks",
                                ":block_id"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "block_id",
                                    "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "3438f70c-1d87-4da4-b4d5-10b340668247",
                            "name": "Successful response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "beacon",
                                        "blocks",
                                        ":block_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "disabled": false,
                                    "description": "(Required) Required in response so client can deserialize returned json or ssz data more effectively.",
                                    "key": "Eth-Consensus-Version",
                                    "value": "pariatur"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"version\": \"phase0\",\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": {\n    \"message\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "3878dce3-df5f-4e98-9bb2-52212300b67f",
                            "name": "The block ID supplied could not be parsed",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "beacon",
                                        "blocks",
                                        ":block_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "5af5f02a-42d1-4db9-a048-98c1230ef6db",
                            "name": "Block not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "beacon",
                                        "blocks",
                                        ":block_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "f3635fe6-0985-4386-9fbd-772bbef37b99",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "beacon",
                                        "blocks",
                                        ":block_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "b05b43f7-1865-4922-ab77-19bd2c731d4a",
                    "name": "Get block root",
                    "request": {
                        "name": "Get block root",
                        "description": {
                            "content": "Retrieves hashTreeRoot of BeaconBlock/BeaconBlockHeader",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "blocks",
                                ":block_id",
                                "root"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "block_id",
                                    "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "a19f348b-5a5c-4212-b6b5-01ebc592084b",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blocks",
                                        ":block_id",
                                        "root"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": {\n    \"root\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "02be55d1-fce7-456e-8ecc-b43389644a32",
                            "name": "The block ID supplied could not be parsed",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blocks",
                                        ":block_id",
                                        "root"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "3d2b99e4-2a62-47e7-829c-794f9a310d40",
                            "name": "Block not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blocks",
                                        ":block_id",
                                        "root"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "c44d7a59-c76b-4c5e-a990-e55b6c971389",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blocks",
                                        ":block_id",
                                        "root"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "2845fef3-cd54-46c0-aece-02eb72333f44",
                    "name": "Get block attestations",
                    "request": {
                        "name": "Get block attestations",
                        "description": {
                            "content": "Retrieves attestation included in requested block.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "blocks",
                                ":block_id",
                                "attestations"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "block_id",
                                    "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "ce599150-6bc4-4a39-b8cf-d56a6f85bdab",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blocks",
                                        ":block_id",
                                        "attestations"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": [\n    {\n      \"aggregation_bits\": \"0x01\",\n      \"signature\": {},\n      \"data\": {\n        \"slot\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"index\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"beacon_block_root\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"source\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"target\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"aggregation_bits\": \"0x01\",\n      \"signature\": {},\n      \"data\": {\n        \"slot\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"index\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"beacon_block_root\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"source\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"target\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "0e992832-0a86-4a4d-b40b-36c93b073ce8",
                            "name": "The block ID supplied could not be parsed",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blocks",
                                        ":block_id",
                                        "attestations"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "5f3488bd-48c0-4c7c-a21e-3a2023c9f1a7",
                            "name": "Block not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blocks",
                                        ":block_id",
                                        "attestations"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "10230ba0-6488-4fa4-a539-d8d965ce096b",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blocks",
                                        ":block_id",
                                        "attestations"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "block_id",
                                            "description": "(Required) Block identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "dee31f72-e834-4a72-a4be-0897595a8516",
                    "name": "Get Attestations from operations pool",
                    "request": {
                        "name": "Get Attestations from operations pool",
                        "description": {
                            "content": "Retrieves attestations known by the node but not necessarily incorporated into any block",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "pool",
                                "attestations"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "slot",
                                    "value": "<string>"
                                },
                                {
                                    "disabled": false,
                                    "key": "committee_index",
                                    "value": "<string>"
                                }
                            ],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "fd823f3d-9fc5-43ab-94e5-21970cabef2a",
                            "name": "Successful response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attestations"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "committee_index",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": [\n    {\n      \"aggregation_bits\": \"0x01\",\n      \"signature\": {},\n      \"data\": {\n        \"slot\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"index\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"beacon_block_root\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"source\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"target\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"aggregation_bits\": \"0x01\",\n      \"signature\": {},\n      \"data\": {\n        \"slot\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"index\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"beacon_block_root\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"source\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"target\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "c34f59d6-c20a-4180-a5e5-e5e09e5c12b9",
                            "name": "The slot or committee index could not be parsed",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attestations"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "committee_index",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "1c678126-6f7b-48a0-bdad-1c290406aea1",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attestations"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "committee_index",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a46b5ab5-bee2-4e39-8a3c-7174a014f8e2",
                    "name": "Submit Attestation objects to node",
                    "request": {
                        "name": "Submit Attestation objects to node",
                        "description": {
                            "content": "Submits Attestation objects to the node.  Each attestation in the request body is processed individually.\n\nIf an attestation is validated successfully the node MUST publish that attestation on the appropriate subnet.\n\nIf one or more attestations fail validation the node MUST return a 400 error with details of which attestations have failed, and why.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "pool",
                                "attestations"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"aggregation_bits\": \"<string>\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  {\n    \"aggregation_bits\": \"<string>\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "4168763c-e951-4c0f-8501-11532016575d",
                            "name": "Attestations are stored in pool and broadcast on appropriate subnet",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attestations"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "5e262fd9-29e7-4f8e-bacb-6bf05c836b69",
                            "name": "Errors with one or more attestations",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attestations"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"some failures\",\n  \"failures\": [\n    {\n      \"index\": 3,\n      \"message\": \"invalid signature\"\n    },\n    {\n      \"index\": 3,\n      \"message\": \"invalid signature\"\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "4d0a0bf6-7324-47aa-b0c8-843b0c14997d",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attestations"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "b7174a72-a349-43ac-a181-7cd92d61ec4e",
                    "name": "Get AttesterSlashings from operations pool",
                    "request": {
                        "name": "Get AttesterSlashings from operations pool",
                        "description": {
                            "content": "Retrieves attester slashings known by the node but not necessarily incorporated into any block",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "pool",
                                "attester_slashings"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "102445f5-93d9-49f3-bc93-252f303de7d2",
                            "name": "Successful response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attester_slashings"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": [\n    {\n      \"attestation_1\": {\n        \"attesting_indices\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signature\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"data\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"attestation_2\": {\n        \"attesting_indices\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signature\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"data\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"attestation_1\": {\n        \"attesting_indices\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signature\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"data\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"attestation_2\": {\n        \"attesting_indices\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signature\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"data\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "b803ee28-99c5-4a16-8722-9b83ce596214",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attester_slashings"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "2f0eee70-9591-4d72-a9f5-f238eaaa3163",
                    "name": "Submit AttesterSlashing object to node's pool",
                    "request": {
                        "name": "Submit AttesterSlashing object to node's pool",
                        "description": {
                            "content": "Submits AttesterSlashing object to node's pool and if passes validation node MUST broadcast it to network.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "pool",
                                "attester_slashings"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"attestation_1\": {\n    \"attesting_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"signature\": {},\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"attestation_2\": {\n    \"attesting_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"signature\": {},\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "46f10969-a581-41ff-9623-21f058222a0e",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attester_slashings"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"attestation_1\": {\n    \"attesting_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"signature\": {},\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"attestation_2\": {\n    \"attesting_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"signature\": {},\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "61578457-788d-4d9b-a069-1f9a5cbd3770",
                            "name": "Invalid attester slashing",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attester_slashings"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"attestation_1\": {\n    \"attesting_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"signature\": {},\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"attestation_2\": {\n    \"attesting_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"signature\": {},\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "2861714e-0b47-4138-bc66-575b72930d1d",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attester_slashings"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"attestation_1\": {\n    \"attesting_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"signature\": {},\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"attestation_2\": {\n    \"attesting_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"signature\": {},\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "000b56b9-f8ad-4349-a537-83df90974705",
                    "name": "Get ProposerSlashings from operations pool",
                    "request": {
                        "name": "Get ProposerSlashings from operations pool",
                        "description": {
                            "content": "Retrieves proposer slashings known by the node but not necessarily incorporated into any block",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "pool",
                                "proposer_slashings"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "05d125c3-90d0-41cc-aa0b-3f1cb8bc54e2",
                            "name": "Successful response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "proposer_slashings"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": [\n    {\n      \"signed_header_1\": {\n        \"message\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signature\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"signed_header_2\": {\n        \"message\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signature\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"signed_header_1\": {\n        \"message\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signature\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"signed_header_2\": {\n        \"message\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signature\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "604314af-fce4-489d-b1d0-964e76afecb1",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "proposer_slashings"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "bd6210e0-c516-4f1b-bf00-610448512bf2",
                    "name": "Submit ProposerSlashing object to node's pool",
                    "request": {
                        "name": "Submit ProposerSlashing object to node's pool",
                        "description": {
                            "content": "Submits ProposerSlashing object to node's pool and if passes validation  node MUST broadcast it to network.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "pool",
                                "proposer_slashings"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"signed_header_1\": {\n    \"message\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": \"<string>\"\n  },\n  \"signed_header_2\": {\n    \"message\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": \"<string>\"\n  }\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "55ab6a32-08d2-4a46-ba2d-a79bc23d1c1b",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "proposer_slashings"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"signed_header_1\": {\n    \"message\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  \"signed_header_2\": {\n    \"message\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "1d5cdf66-c2a3-496f-9fa3-feb66f09b574",
                            "name": "Invalid proposer slashing",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "proposer_slashings"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"signed_header_1\": {\n    \"message\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  \"signed_header_2\": {\n    \"message\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "f97ac4e9-b012-452e-a948-e41a1a8828c2",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "proposer_slashings"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"signed_header_1\": {\n    \"message\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  \"signed_header_2\": {\n    \"message\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "b62ccb7b-8bc5-4c67-990a-e1ab58d34d1c",
                    "name": "Submit sync committee signatures to node",
                    "request": {
                        "name": "Submit sync committee signatures to node",
                        "description": {
                            "content": "Submits sync committee signature objects to the node.\n\nSync committee signatures are not present in phase0, but are required for Altair networks.\n\nIf a sync committee signature is validated successfully the node MUST publish that sync committee signature on all applicable subnets.\n\nIf one or more sync committee signatures fail validation the node MUST return a 400 error with details of which sync committee signatures have failed, and why.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "pool",
                                "sync_committees"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"slot\": \"<string>\",\n    \"beacon_block_root\": \"<string>\",\n    \"validator_index\": \"<string>\",\n    \"signature\": \"<string>\"\n  },\n  {\n    \"slot\": \"<string>\",\n    \"beacon_block_root\": \"<string>\",\n    \"validator_index\": \"<string>\",\n    \"signature\": \"<string>\"\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "027effef-313d-49da-b2c7-ec423040bfec",
                            "name": "Sync committee signatures are stored in pool and broadcast on appropriate subnet",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "sync_committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"slot\": \"1\",\n    \"beacon_block_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"validator_index\": \"1\",\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"slot\": \"1\",\n    \"beacon_block_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"validator_index\": \"1\",\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "36247cd5-6619-4688-87b1-ac462ecee31a",
                            "name": "Errors with one or more sync committee signatures",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "sync_committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"slot\": \"1\",\n    \"beacon_block_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"validator_index\": \"1\",\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"slot\": \"1\",\n    \"beacon_block_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"validator_index\": \"1\",\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"some failures\",\n  \"failures\": [\n    {\n      \"index\": 3,\n      \"message\": \"invalid signature\"\n    },\n    {\n      \"index\": 3,\n      \"message\": \"invalid signature\"\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "30a94992-429a-4b0c-8ba7-3857e6ac71db",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "sync_committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"slot\": \"1\",\n    \"beacon_block_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"validator_index\": \"1\",\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"slot\": \"1\",\n    \"beacon_block_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"validator_index\": \"1\",\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "0daf95fa-42ef-4708-aee0-2de522899182",
                    "name": "Get SignedVoluntaryExit from operations pool",
                    "request": {
                        "name": "Get SignedVoluntaryExit from operations pool",
                        "description": {
                            "content": "Retrieves voluntary exits known by the node but not necessarily incorporated into any block",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "pool",
                                "voluntary_exits"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "bca721e7-4c39-4864-91fa-51b282482ac6",
                            "name": "Successful response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "voluntary_exits"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": [\n    {\n      \"message\": {\n        \"epoch\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"validator_index\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n    },\n    {\n      \"message\": {\n        \"epoch\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"validator_index\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "9016ab87-3869-4b96-a3f7-fbdc578b8df2",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "voluntary_exits"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "57a9b4b9-c9fa-47e5-a0fb-04332cebcfed",
                    "name": "Submit SignedVoluntaryExit object to node's pool",
                    "request": {
                        "name": "Submit SignedVoluntaryExit object to node's pool",
                        "description": {
                            "content": "Submits SignedVoluntaryExit object to node's pool and if passes validation node MUST broadcast it to network.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "pool",
                                "voluntary_exits"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"message\": {\n    \"epoch\": {},\n    \"validator_index\": {}\n  },\n  \"signature\": \"<string>\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "77d6a118-e883-454f-b3de-25c7290530e1",
                            "name": "Voluntary exit is stored in node and broadcasted to network",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "voluntary_exits"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"message\": {\n    \"epoch\": {},\n    \"validator_index\": {}\n  },\n  \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "8d721d56-94ff-4435-9429-7b073ac6ec6a",
                            "name": "Invalid voluntary exit",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "voluntary_exits"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"message\": {\n    \"epoch\": {},\n    \"validator_index\": {}\n  },\n  \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "06d8827e-b0dd-4fe9-9324-6ca1a59a8ed6",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "voluntary_exits"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"message\": {\n    \"epoch\": {},\n    \"validator_index\": {}\n  },\n  \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                }
            ],
            "event": []
        },
        {
            "id": "eb9216f2-86ab-4edf-a3e9-ed7fe5e093da",
            "name": "Config",
            "description": {
                "content": "Endpoints to query chain configuration, specification, and fork schedules.",
                "type": "text/plain"
            },
            "item": [
                {
                    "id": "6a30384c-b73e-4e19-b878-08d51f02adf0",
                    "name": "Get scheduled upcoming forks.",
                    "request": {
                        "name": "Get scheduled upcoming forks.",
                        "description": {
                            "content": "Retrieve all forks, past present and future, of which this node is aware.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "config",
                                "fork_schedule"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "dee51597-2a8a-4236-a319-6c346ced6b66",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "config",
                                        "fork_schedule"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": [\n    {\n      \"previous_version\": \"0x00000000\",\n      \"current_version\": \"0x00000000\",\n      \"epoch\": \"1\"\n    },\n    {\n      \"previous_version\": \"0x00000000\",\n      \"current_version\": \"0x00000000\",\n      \"epoch\": \"1\"\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "3c9dee5e-0ddb-49e1-94cc-e1543a205f2b",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "config",
                                        "fork_schedule"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "c36cdc22-2baf-41ae-89b8-2592b1211aa4",
                    "name": "Get spec params.",
                    "request": {
                        "name": "Get spec params.",
                        "description": {
                            "content": "Retrieve specification configuration used on this node.  The configuration should include:\n  - Constants for all hard forks known by the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#constants) and [altair](https://github.com/ethereum/consensus-specs/blob/dev/specs/altair/beacon-chain.md#constants) values\n  - Presets for all hard forks supplied to the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/dev/presets/mainnet/phase0.yaml) and [altair](https://github.com/ethereum/consensus-specs/blob/dev/presets/mainnet/altair.yaml) values\n  - Configuration for the beacon node, for example the [mainnet](https://github.com/ethereum/consensus-specs/blob/dev/configs/mainnet.yaml) values\n\nValues are returned with following format:\n  - any value starting with 0x in the spec is returned as a hex string\n  - numeric values are returned as a quoted integer\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "config",
                                "spec"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "83511131-e702-449c-abf2-49a816ad6b24",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "config",
                                        "spec"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"DEPOSIT_CONTRACT_ADDRESS\": \"0x00000000219ab540356cBB839Cbe05303d7705Fa\",\n  \"DEPOSIT_NETWORK_ID\": \"1\",\n  \"DOMAIN_AGGREGATE_AND_PROOF\": \"0x06000000\",\n  \"INACTIVITY_PENALTY_QUOTIENT\": \"67108864\",\n  \"INACTIVITY_PENALTY_QUOTIENT_ALTAIR\": \"50331648\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "47109277-14fa-4f47-839d-ac165060c31d",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "config",
                                        "spec"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "e0294d23-0967-401a-8158-0022d3c0f96c",
                    "name": "Get deposit contract address.",
                    "request": {
                        "name": "Get deposit contract address.",
                        "description": {
                            "content": "Retrieve Eth1 deposit contract address and chain ID.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "config",
                                "deposit_contract"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "dd8fe000-30f8-46fa-b4a9-84c60cdbbcb2",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "config",
                                        "deposit_contract"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"chain_id\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"address\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "2d82a044-5b20-4ddc-9c15-dbd9a7157040",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "config",
                                        "deposit_contract"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "d14f9fcd-1b32-4c06-8846-481fc7673e89",
            "name": "Debug",
            "description": {
                "content": "Set of endpoints to debug chain and shouldn't be exposed publicly.",
                "type": "text/plain"
            },
            "item": [
                {
                    "id": "4872992b-d3df-45b7-8c9f-84bffd8f0d49",
                    "name": "Get full BeaconState object",
                    "request": {
                        "name": "Get full BeaconState object",
                        "description": {
                            "content": "Returns full BeaconState object for given stateId.\nDepending on `Accept` header it can be returned either as json or as bytes serialized by SSZ\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v2",
                                "debug",
                                "beacon",
                                "states",
                                ":state_id"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "state_id",
                                    "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "772f37a1-1838-4ecf-b639-f8b74b1f3897",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "debug",
                                        "beacon",
                                        "states",
                                        ":state_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "disabled": false,
                                    "description": "(Required) Required in response so client can deserialize returned json or ssz data more effectively.",
                                    "key": "Eth-Consensus-Version",
                                    "value": "pariatur"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"version\": \"phase0\",\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": {\n    \"genesis_time\": \"1\",\n    \"genesis_validators_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"slot\": \"1\",\n    \"fork\": {\n      \"previous_version\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"current_version\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"latest_block_header\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"block_roots\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"state_roots\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"historical_roots\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"eth1_data\": {\n      \"deposit_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"deposit_count\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"block_hash\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"eth1_data_votes\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"eth1_deposit_index\": \"1\",\n    \"validators\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"randao_mixes\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"slashings\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"previous_epoch_attestations\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"current_epoch_attestations\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"justification_bits\": \"0x01\",\n    \"previous_justified_checkpoint\": {\n      \"epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"current_justified_checkpoint\": {\n      \"epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"finalized_checkpoint\": {\n      \"epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "06736530-500e-42bb-a0ca-f548384d9324",
                            "name": "Invalid state ID",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "debug",
                                        "beacon",
                                        "states",
                                        ":state_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "85dd4460-d7c8-474c-ac3e-4084daaf4e2c",
                            "name": "State not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "debug",
                                        "beacon",
                                        "states",
                                        ":state_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "b3a3d6f1-6f85-455e-91ef-ded461ec0178",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "debug",
                                        "beacon",
                                        "states",
                                        ":state_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "90a6545e-f6f6-4d20-840c-ef029aa66722",
                    "name": "Get fork choice leaves",
                    "request": {
                        "name": "Get fork choice leaves",
                        "description": {
                            "content": "Retrieves all possible chain heads (leaves of fork choice tree).",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "debug",
                                "beacon",
                                "heads"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "45cea0af-7f95-4ac3-b56b-2e2bff419f26",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "debug",
                                        "beacon",
                                        "heads"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": [\n    {\n      \"root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n      \"slot\": \"1\"\n    },\n    {\n      \"root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n      \"slot\": \"1\"\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "e541c0ef-44f7-4d03-b01c-c70f5999bfd0",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "debug",
                                        "beacon",
                                        "heads"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "9dd91a7f-b739-48e7-a6bd-10b9bcee7fc2",
                    "name": "Get fork choice leaves",
                    "request": {
                        "name": "Get fork choice leaves",
                        "description": {
                            "content": "Retrieves all possible chain heads (leaves of fork choice tree).",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v2",
                                "debug",
                                "beacon",
                                "heads"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "576f1368-a2b0-4c03-b78c-d36b74dfcf06",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "debug",
                                        "beacon",
                                        "heads"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": [\n    {\n      \"root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n      \"slot\": \"1\",\n      \"execution_optimistic\": {\n        \"value\": \"<Error: Could not resolve allOf schema\"\n      }\n    },\n    {\n      \"root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n      \"slot\": \"1\",\n      \"execution_optimistic\": {\n        \"value\": \"<Error: Could not resolve allOf schema\"\n      }\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "babe6044-6150-4728-acbd-8d89457b4eae",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "debug",
                                        "beacon",
                                        "heads"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "b3e3358c-ea38-46a3-8e8f-1b3ae386fab9",
            "name": "Events",
            "description": {
                "content": "Set of endpoints to for event subscription.",
                "type": "text/plain"
            },
            "item": [
                {
                    "id": "25f40948-387d-4315-9ece-f2e01cd07962",
                    "name": "Subscribe to beacon node events",
                    "request": {
                        "name": "Subscribe to beacon node events",
                        "description": {
                            "content": "Provides endpoint to subscribe to beacon node Server-Sent-Events stream.\nConsumers should use [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)\nimplementation to listen on those events.\n\nServers _may_ send SSE comments beginning with `:` for any purpose, including to keep the\nevent stream connection alive in the presence of proxy servers.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "events"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "topics",
                                    "value": "<string>",
                                    "description": "(Required) Event types to subscribe to"
                                },
                                {
                                    "disabled": false,
                                    "key": "topics",
                                    "value": "<string>",
                                    "description": "(Required) Event types to subscribe to"
                                }
                            ],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "text/event-stream"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "2408b50e-cacc-4bd9-9e51-76ce455f2d99",
                            "name": "Opened SSE stream.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "events"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "topics",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "topics",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/event-stream"
                                }
                            ],
                            "body": "event: head\ndata: {\"slot\":\"10\", \"block\":\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\", \"state\":\"0x600e852a08c1200654ddf11025f1ceacb3c2e74bdd5c630cde0838b2591b69f9\", \"epoch_transition\":false, \"previous_duty_dependent_root\":\"0x5e0043f107cb57913498fbf2f99ff55e730bf1e151f02f221e977c91a90a0e91\", \"current_duty_dependent_root\":\"0x5e0043f107cb57913498fbf2f99ff55e730bf1e151f02f221e977c91a90a0e91\", \"execution_optimistic\": false}\n",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "47f161b8-c510-46a7-8806-acb78897c91a",
                            "name": "The topics supplied could not be parsed",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "events"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "topics",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "topics",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "fbba8de3-e299-4ea3-8fc7-45af523eb314",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "events"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "topics",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "topics",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "bf8a8eb8-252e-473e-be66-58b9263b3650",
            "name": "Node",
            "description": {
                "content": "Endpoints to query node related informations",
                "type": "text/plain"
            },
            "item": [
                {
                    "id": "2d461e79-5426-4a32-8224-2cc63b9b46da",
                    "name": "Get node network identity",
                    "request": {
                        "name": "Get node network identity",
                        "description": {
                            "content": "Retrieves data about the node's network presence",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "node",
                                "identity"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "15cc2c16-b0ea-47b1-8d9f-3b048cfd1148",
                            "name": "Request successful",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "identity"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"peer_id\": \"QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\",\n    \"enr\": \"enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8\",\n    \"metadata\": {\n      \"seq_number\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attnets\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"syncnets\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "32bf82f9-65f9-4436-a1d8-0fb6dbe208f1",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "identity"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "caa297d4-f167-4a87-95ac-c0be002779f0",
                    "name": "Get node network peers",
                    "request": {
                        "name": "Get node network peers",
                        "description": {
                            "content": "Retrieves data about the node's network peers. By default this returns all peers. Multiple query params are combined using AND conditions",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "node",
                                "peers"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "state",
                                    "value": "<string>"
                                },
                                {
                                    "disabled": false,
                                    "key": "direction",
                                    "value": "<string>"
                                }
                            ],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "6fa2f58e-e517-4842-a785-c176841d9f05",
                            "name": "Request successful",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "peers"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "state",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "direction",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": [\n    {\n      \"peer_id\": \"QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\",\n      \"enr\": {},\n      \"last_seen_p2p_address\": {},\n      \"state\": \"<string>\",\n      \"direction\": \"<string>\"\n    },\n    {\n      \"peer_id\": \"QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\",\n      \"enr\": {},\n      \"last_seen_p2p_address\": {},\n      \"state\": \"<string>\",\n      \"direction\": \"<string>\"\n    }\n  ],\n  \"meta\": {\n    \"count\": 1\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "50e0ad31-d7f0-47c2-95f0-1b6f6967cb61",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "peers"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "state",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "direction",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "0d8b309f-8960-444d-84e8-d3f9f9868d4d",
                    "name": "Get peer",
                    "request": {
                        "name": "Get peer",
                        "description": {
                            "content": "Retrieves data about the given peer",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "node",
                                "peers",
                                ":peer_id"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "peer_id",
                                    "description": "(Required) "
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "443187cc-a781-4e10-b267-d508781d559b",
                            "name": "Request successful",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "peers",
                                        ":peer_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "peer_id",
                                            "description": "(Required) "
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"peer_id\": \"QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\",\n    \"enr\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"last_seen_p2p_address\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"state\": \"<string>\",\n    \"direction\": \"<string>\"\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "59b4e8bc-8c17-4472-8306-ad3ab98f5ce9",
                            "name": "The peer ID supplied could not be parsed",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "peers",
                                        ":peer_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "peer_id",
                                            "description": "(Required) "
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "4af013e1-2f88-4488-bbc4-ac95d0eb1b1f",
                            "name": "Peer not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "peers",
                                        ":peer_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "peer_id",
                                            "description": "(Required) "
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "547e104b-42cc-4656-bbea-5bdf9352935c",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "peers",
                                        ":peer_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "peer_id",
                                            "description": "(Required) "
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "7e45471d-7262-474b-ab7c-c51d85dc7217",
                    "name": "Get peer count",
                    "request": {
                        "name": "Get peer count",
                        "description": {
                            "content": "Retrieves number of known peers.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "node",
                                "peer_count"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "eeb3ed18-ca8b-409e-a420-bd635648ac71",
                            "name": "Request successful",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "peer_count"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"disconnected\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"connecting\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"connected\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"disconnecting\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "f531729f-7c8d-4c8f-88b1-f8528023dc5f",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "peer_count"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a7b666f7-1aba-404c-9c09-d9abbb940138",
                    "name": "Get version string of the running beacon node.",
                    "request": {
                        "name": "Get version string of the running beacon node.",
                        "description": {
                            "content": "Requests that the beacon node identify information about its implementation in a format similar to a  [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) field.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "node",
                                "version"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "545ef71e-cb6b-41cd-b5c6-7bc3bc090916",
                            "name": "Request successful",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "version"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"version\": \"Lighthouse/v0.1.5 (Linux x86_64)\"\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "462fbfef-459d-47b6-8595-62be4e9a0b16",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "version"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "477f6366-e619-47d0-9ba7-f93089dbf853",
                    "name": "Get node syncing status",
                    "request": {
                        "name": "Get node syncing status",
                        "description": {
                            "content": "Requests the beacon node to describe if it's currently syncing or not, and if it is, what block it is up to.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "node",
                                "syncing"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "9940b111-b479-4f9b-b119-dd40cbe76bf6",
                            "name": "Request successful",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "syncing"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"head_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"sync_distance\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_syncing\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_optimistic\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "82ea0601-de81-42f3-9215-9a4691e3faea",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "syncing"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a2c78d72-91d1-4e86-8e79-f91b1bfb8b70",
                    "name": "Get health check",
                    "request": {
                        "name": "Get health check",
                        "description": {
                            "content": "Returns node health status in http status codes. Useful for load balancers.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "node",
                                "health"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "216152a5-9d32-4844-af90-d7a6c8120054",
                            "name": "Node is ready",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "health"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "cbbcb49d-55a0-4934-8ff9-1ec471524b73",
                            "name": "Node is syncing but can serve incomplete data",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "health"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Partial Content",
                            "code": 206,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "4d631c9b-36e3-4d0c-84d5-d44c9ecc8657",
                            "name": "Node not initialized or having issues",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "health"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        },
        {
            "id": "6a60d336-5291-4797-95ce-67a0405f87a5",
            "name": "Validator",
            "description": {
                "content": "Endpoints intended for validator clients",
                "type": "text/plain"
            },
            "item": [
                {
                    "id": "a8d366ba-647a-46c5-9300-e3586caa161c",
                    "name": "Get attester duties",
                    "request": {
                        "name": "Get attester duties",
                        "description": {
                            "content": "Requests the beacon node to provide a set of attestation duties, which should be performed by validators, for a particular epoch.\nDuties should only need to be checked once per epoch, however a chain reorganization (of > MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:\n- event.previous_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`\n- event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) + 1 == epoch`\n- event.block otherwise\n\nThe dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch - 1) - 1)` or the genesis block root in the case of underflow.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "duties",
                                "attester",
                                ":epoch"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "epoch",
                                    "description": "(Required) Should only be allowed 1 epoch ahead"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  \"<string>\",\n  \"<string>\"\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "faf09faa-a216-455a-92a9-9f7e9e7ca557",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "attester",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) Should only be allowed 1 epoch ahead"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"dependent_root\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": [\n    {\n      \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n      \"validator_index\": {},\n      \"committee_index\": {},\n      \"committee_length\": {},\n      \"committees_at_slot\": {},\n      \"validator_committee_index\": {},\n      \"slot\": {}\n    },\n    {\n      \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n      \"validator_index\": {},\n      \"committee_index\": {},\n      \"committee_length\": {},\n      \"committees_at_slot\": {},\n      \"validator_committee_index\": {},\n      \"slot\": {}\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "b418f116-b676-4848-967d-cf98c6980ce6",
                            "name": "Invalid epoch or index",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "attester",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) Should only be allowed 1 epoch ahead"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "9b17033c-3ab7-47a2-a118-3fb949176e00",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "attester",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) Should only be allowed 1 epoch ahead"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "c060f77a-1239-4091-832c-ad4ea66fcb35",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "attester",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) Should only be allowed 1 epoch ahead"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "9a6f491c-295d-4a4e-adff-6e6ad36230a0",
                    "name": "Get block proposers duties",
                    "request": {
                        "name": "Get block proposers duties",
                        "description": {
                            "content": "Request beacon node to provide all validators that are scheduled to propose a block in the given epoch.\nDuties should only need to be checked once per epoch, however a chain reorganization could occur that results in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:\n- event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`\n- event.block otherwise\n\nThe dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch) - 1)` or the genesis block root in the case of underflow.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "duties",
                                "proposer",
                                ":epoch"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "epoch",
                                    "description": "(Required) "
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "51fbabdc-8a5f-482a-bda0-25dcf29794a0",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "proposer",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) "
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"dependent_root\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": [\n    {\n      \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n      \"validator_index\": {},\n      \"slot\": {}\n    },\n    {\n      \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n      \"validator_index\": {},\n      \"slot\": {}\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "7c6ffe4f-ff99-4062-b2ec-424d9d6bd25f",
                            "name": "Invalid epoch",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "proposer",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) "
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "e7d2f28b-9fd2-4140-b597-1a626f17f327",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "proposer",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) "
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "ccbfdeae-014d-4d4c-b49b-02965879e876",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "proposer",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) "
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6bae133c-fd67-4b5d-9aa1-157f7a8b8894",
                    "name": "Get sync committee duties",
                    "request": {
                        "name": "Get sync committee duties",
                        "description": {
                            "content": "Requests the beacon node to provide a set of sync committee duties for a particular epoch.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "duties",
                                "sync",
                                ":epoch"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "epoch",
                                    "description": "(Required) epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  \"<string>\",\n  \"<string>\"\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "2ce4e64e-b504-428a-80a0-c72ad671225b",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "sync",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": [\n    {\n      \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n      \"validator_index\": {},\n      \"validator_sync_committee_indices\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    {\n      \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n      \"validator_index\": {},\n      \"validator_sync_committee_indices\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "cbafab54-afd4-4d5c-ac6d-d347a8f4231d",
                            "name": "Invalid epoch or index",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "sync",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "0bbbb347-e5a8-4ffa-aeba-9b5111d9f66c",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "sync",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "6fd05dd9-7c43-4a5f-b578-d04f009c8de5",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "sync",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "a8fde3c2-4db8-4c05-995a-e37864f6aba5",
                    "name": "Produce a new block, without signature.",
                    "request": {
                        "name": "Produce a new block, without signature.",
                        "description": {
                            "content": "Requests a beacon node to produce a valid block, which can then be signed by a validator.\n\n__NOTE__: Supports only phase0 blocks.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "blocks",
                                ":slot"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "randao_reveal",
                                    "value": "<string>",
                                    "description": "(Required) The validator's randao reveal value."
                                },
                                {
                                    "disabled": false,
                                    "key": "graffiti",
                                    "value": "<hex>",
                                    "description": "Arbitrary data validator wants to include in block."
                                }
                            ],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "slot",
                                    "description": "(Required) The slot for which the block should be proposed."
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "b9899a69-05d2-424e-8e64-b53722ad8310",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"slot\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"proposer_index\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"parent_root\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"state_root\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"body\": {\n      \"randao_reveal\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"eth1_data\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"graffiti\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"proposer_slashings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attester_slashings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attestations\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"deposits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"voluntary_exits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "6cd11f9b-e108-4d71-a230-c14b37988fac",
                            "name": "Invalid block production request",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"Invalid request to produce a block\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "97fe262c-ac2a-4cce-9d2e-d23dc025c66e",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "01ac8893-8f51-4ea8-9e84-676f77ebc5fa",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "f57c63dd-2367-4816-9970-992e2ed03183",
                    "name": "Produce a new block, without signature.",
                    "request": {
                        "name": "Produce a new block, without signature.",
                        "description": {
                            "content": "Requests a beacon node to produce a valid block, which can then be signed by a validator.\n\nMetadata in the response indicates the type of block produced, and the supported types of block\nwill be added to as forks progress.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v2",
                                "validator",
                                "blocks",
                                ":slot"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "randao_reveal",
                                    "value": "<string>",
                                    "description": "(Required) The validator's randao reveal value."
                                },
                                {
                                    "disabled": false,
                                    "key": "graffiti",
                                    "value": "<hex>",
                                    "description": "Arbitrary data validator wants to include in block."
                                }
                            ],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "slot",
                                    "description": "(Required) The slot for which the block should be proposed."
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "20e724c5-9511-4a65-b4e2-161da32b67de",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "disabled": false,
                                    "description": "(Required) Required in response so client can deserialize returned json or ssz data more effectively.",
                                    "key": "Eth-Consensus-Version",
                                    "value": "pariatur"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"version\": \"phase0\",\n  \"data\": {\n    \"slot\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"proposer_index\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"parent_root\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"state_root\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "67e8f64a-ca05-4932-b032-c13a22f40af9",
                            "name": "Invalid block production request",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"Invalid request to produce a block\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "e7d1a6e5-4369-4d43-bda6-dca0d4cecf04",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "4ac0826f-415c-4cec-94f6-b2cdd93f6f96",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "b89e869f-853c-43af-9512-700677f86922",
                    "name": "Produce a new blinded block, without signature.",
                    "request": {
                        "name": "Produce a new blinded block, without signature.",
                        "description": {
                            "content": "Requests a beacon node to produce a valid blinded block, which can then be signed by a validator. \nA blinded block is a block with only a transactions root, rather than a full transactions list.\n\nMetadata in the response indicates the type of block produced, and the supported types of block\nwill be added to as forks progress.\n\nPre-Bellatrix, this endpoint will return a `BeaconBlock`.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "blinded_blocks",
                                ":slot"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "randao_reveal",
                                    "value": "<string>",
                                    "description": "(Required) The validator's randao reveal value."
                                },
                                {
                                    "disabled": false,
                                    "key": "graffiti",
                                    "value": "<hex>",
                                    "description": "Arbitrary data validator wants to include in block."
                                }
                            ],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "slot",
                                    "description": "(Required) The slot for which the block should be proposed."
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "62aad521-89e5-4942-8b8d-58376c9ac4e5",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blinded_blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "disabled": false,
                                    "description": "(Required) Required in response so client can deserialize returned json or ssz data more effectively.",
                                    "key": "Eth-Consensus-Version",
                                    "value": "pariatur"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"version\": \"bellatrix\",\n  \"data\": {\n    \"slot\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"proposer_index\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"parent_root\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"state_root\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "8579977f-fb99-4716-8ba4-87e848b24242",
                            "name": "Invalid block production request",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blinded_blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"Invalid request to produce a block\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "61f5aefe-a26b-4cff-913c-be22c87f9356",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blinded_blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "427d8947-0ebc-440e-8a33-db5d55b5c11c",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blinded_blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "0ac6e472-ae82-40f6-9a1c-c442686118f5",
                    "name": "Produce an attestation data",
                    "request": {
                        "name": "Produce an attestation data",
                        "description": {
                            "content": "Requests that the beacon node produce an AttestationData.\n\nA 503 error must be returned if the block identified by the response\n`beacon_block_root` is optimistic (i.e. the attestation attests to a block\nthat has not been fully verified by an execution engine).\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "attestation_data"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "slot",
                                    "value": "<string>",
                                    "description": "(Required) The slot for which an attestation data should be created."
                                },
                                {
                                    "disabled": false,
                                    "key": "committee_index",
                                    "value": "<string>",
                                    "description": "(Required) The committee index for which an attestation data should be created."
                                }
                            ],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "23339320-b647-401c-9e01-abfb768cdc45",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "attestation_data"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "committee_index",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"slot\": \"1\",\n    \"index\": \"1\",\n    \"beacon_block_root\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"source\": {\n      \"epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"target\": {\n      \"epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "dae4bbb3-5da2-4071-bb26-865e121e0248",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "attestation_data"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "committee_index",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "fe85f82b-a474-412c-be8b-81bdb913afd3",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "attestation_data"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "committee_index",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "6cd975cc-5f5a-44b8-bf97-8659bd300d54",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "attestation_data"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "committee_index",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "220e9225-72a5-46b3-976c-86b6f3a567e3",
                    "name": "Get aggregated attestation",
                    "request": {
                        "name": "Get aggregated attestation",
                        "description": {
                            "content": "Aggregates all attestations matching given attestation data root and slot.\n\nA 503 error must be returned if the block identified by the response\n`beacon_block_root` is optimistic (i.e. the aggregated attestation attests\nto a block that has not been fully verified by an execution engine).\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "aggregate_attestation"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "attestation_data_root",
                                    "value": "<string>",
                                    "description": "(Required) HashTreeRoot of AttestationData that validator wants aggregated"
                                },
                                {
                                    "disabled": false,
                                    "key": "slot",
                                    "value": "<string>",
                                    "description": "(Required) "
                                }
                            ],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "9df7c17c-9065-4530-be40-c9cd6c972bdb",
                            "name": "Returns aggregated `Attestation` object with same `AttestationData` root.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_attestation"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "attestation_data_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        },
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "c7959649-5764-490a-bdb7-2082cd7fb465",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_attestation"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "attestation_data_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        },
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "4ab0462c-1a41-44da-8061-73290c561110",
                            "name": "Not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_attestation"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "attestation_data_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        },
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"Requested item not found\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "ff5654db-e648-4921-8437-6f55a6b808bd",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_attestation"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "attestation_data_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        },
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "d2da731f-4dcc-474e-847c-b49950c4f532",
                    "name": "Publish multiple aggregate and proofs",
                    "request": {
                        "name": "Publish multiple aggregate and proofs",
                        "description": {
                            "content": "Verifies given aggregate and proofs and publishes them on appropriate gossipsub topic.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "aggregate_and_proofs"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"<string>\"\n  },\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"<string>\"\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "dbedcd4e-3d10-4f26-87f8-d56f88892e2c",
                            "name": "Successful response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_and_proofs"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "d76656e4-b89d-4357-b27f-b8fbae5514e9",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_and_proofs"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "0b262fb2-3b76-4334-ad74-14efe8390cb7",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_and_proofs"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "849d75a8-36f1-436f-87bb-15ff4695f5bd",
                    "name": "Signal beacon node to prepare for a committee subnet",
                    "request": {
                        "name": "Signal beacon node to prepare for a committee subnet",
                        "description": {
                            "content": "After beacon node receives this request,\nsearch using discv5 for peers related to this subnet\nand replace current peers with those ones if necessary\nIf validator `is_aggregator`, beacon node must:\n- announce subnet topic subscription on gossipsub\n- aggregate attestations received on that subnet\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "beacon_committee_subscriptions"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"validator_index\": \"<string>\",\n    \"committee_index\": \"<string>\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  },\n  {\n    \"validator_index\": \"<string>\",\n    \"committee_index\": \"<string>\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "6168a34d-52a3-4311-b964-40f1aecf345b",
                            "name": "Slot signature is valid and beacon node has prepared the attestation subnet.\n\nNote that we cannot be certain the Beacon node will find peers for that subnet for various reasons.\n",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "beacon_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "0e96a460-d918-436b-a7bb-9051c5cd3e0a",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "beacon_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "409ce5c8-6667-46af-857f-435089fed176",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "beacon_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "07db517f-5e3e-412a-b825-c42ad93ba427",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "beacon_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "633ede2f-8212-43bd-ada2-3c41130d064e",
                    "name": "Subscribe to sync committee subnets",
                    "request": {
                        "name": "Subscribe to sync committee subnets",
                        "description": {
                            "content": "Subscribe to a number of sync committee subnets\n\nSync committees are not present in phase0, but are required for Altair networks.\n\nSubscribing to sync committee subnets is an action performed by VC to enable network participation in Altair networks, and only required if the VC has an active validator in an active sync committee.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "sync_committee_subscriptions"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"validator_index\": \"<string>\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  },\n  {\n    \"validator_index\": \"<string>\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "0b232c5a-aeaa-4ddf-823d-65280c491e84",
                            "name": "Successful response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  },\n  {\n    \"validator_index\": \"1\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "af7ce178-c7d3-4bdf-92ae-cc18ade0b9f6",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  },\n  {\n    \"validator_index\": \"1\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "b035fba2-ef1e-46a7-bb1c-368de9991421",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  },\n  {\n    \"validator_index\": \"1\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "7bdd7b39-b312-4ea4-8e2f-3033a667da91",
                    "name": "Produce a sync committee contribution",
                    "request": {
                        "name": "Produce a sync committee contribution",
                        "description": {
                            "content": "Requests that the beacon node produce a sync committee contribution.\n\nA 503 error must be returned if the block identified by the response\n`beacon_block_root` is optimistic (i.e. the sync committee contribution\nrefers to a block that has not been fully verified by an execution engine).\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "sync_committee_contribution"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "slot",
                                    "value": "<string>",
                                    "description": "(Required) The slot for which a sync committee contribution should be created."
                                },
                                {
                                    "disabled": false,
                                    "key": "subcommittee_index",
                                    "value": "<string>",
                                    "description": "(Required) the subcommittee index for which to produce the contribution."
                                },
                                {
                                    "disabled": false,
                                    "key": "beacon_block_root",
                                    "value": "<string>",
                                    "description": "(Required) the block root for which to produce the contribution."
                                }
                            ],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "8062a382-013f-4de3-9e6f-b35795cbe6e4",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_contribution"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "subcommittee_index",
                                            "value": "1"
                                        },
                                        {
                                            "key": "beacon_block_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"beacon_block_root\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"subcommittee_index\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"aggregation_bits\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "0447a206-be81-48a4-83ee-ded78fc31127",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_contribution"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "subcommittee_index",
                                            "value": "1"
                                        },
                                        {
                                            "key": "beacon_block_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "79a469f0-87d5-448b-8da6-d64b50c9b1d4",
                            "name": "Not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_contribution"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "subcommittee_index",
                                            "value": "1"
                                        },
                                        {
                                            "key": "beacon_block_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"Requested item not found\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "afdacbcd-f337-4bde-8f4f-b306863aa124",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_contribution"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "subcommittee_index",
                                            "value": "1"
                                        },
                                        {
                                            "key": "beacon_block_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "beef4cf4-c23c-4687-9f3b-c59547396fb2",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_contribution"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "subcommittee_index",
                                            "value": "1"
                                        },
                                        {
                                            "key": "beacon_block_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "8cda21a6-c6dd-499a-b042-6b1872c409dc",
                    "name": "Publish multiple contribution and proofs",
                    "request": {
                        "name": "Publish multiple contribution and proofs",
                        "description": {
                            "content": "Publish multiple signed sync committee contribution and proofs",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "contribution_and_proofs"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"<string>\"\n  },\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"<string>\"\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "4c39c67e-da56-4305-8751-55d0c086f731",
                            "name": "Successful response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "contribution_and_proofs"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "b61c172d-ed03-4110-acce-014fda026e78",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "contribution_and_proofs"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "69d97db6-53ff-4a6f-a30c-1a1a60b401e5",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "contribution_and_proofs"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "3d89b780-933b-4398-89e1-b0489a3e0a3e",
                    "name": "Provide beacon node with proposals for the given validators.",
                    "request": {
                        "name": "Provide beacon node with proposals for the given validators.",
                        "description": {
                            "content": "Prepares the beacon node for potential proposers by supplying information\nrequired when proposing blocks for the given validators.  The information\nsupplied for each validator index will persist through the epoch in which\nthe call is submitted and for a further two epochs after that, or until the\nbeacon node restarts.  It is expected that validator clients will send this\ninformation periodically, for example each epoch, to ensure beacon nodes have\ncorrect and timely fee recipient information.\n\nNote that there is no guarantee that the beacon node will use the supplied fee\nrecipient when creating a block proposal, so on receipt of a proposed block the\nvalidator should confirm that it finds the fee recipient within the block\nacceptable before signing it.\n\nAlso note that requests containing currently inactive or unknown validator\nindices will be accepted, as they may become active at a later epoch.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "prepare_beacon_proposer"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"validator_index\": \"<string>\",\n    \"fee_recipient\": \"<string>\"\n  },\n  {\n    \"validator_index\": \"<string>\",\n    \"fee_recipient\": \"<string>\"\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "d4d20c45-e99e-4759-a68e-87ba79dce98b",
                            "name": "Preparation information has been received.\n",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "prepare_beacon_proposer"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "3d4b289d-421e-4cb2-b469-a2bacbc3bb63",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "prepare_beacon_proposer"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "55d92335-37af-4def-a3b9-ffc3ac51d192",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "prepare_beacon_proposer"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "1a773d89-cbf1-4d0f-844b-764c31db746e",
                    "name": "Provide beacon node with registrations for the given validators to the external builder network.",
                    "request": {
                        "name": "Provide beacon node with registrations for the given validators to the external builder network.",
                        "description": {
                            "content": "Prepares the beacon node for engaging with external builders. The\ninformation will be sent by the beacon node to the builder network. It is\nexpected that the validator client will send this information periodically\nto ensure the beacon node has correct and timely registration information\nto provide to builders. The validator client should not sign blinded beacon\nblocks that do not adhere to their latest fee recipient and gas limit\npreferences.\n\nNote that requests containing currently inactive or unknown validator\npubkeys will be accepted, as they may become active at a later epoch.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "register_validator"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"message\": {\n      \"fee_recipient\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gas_limit\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"pubkey\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"<string>\"\n  },\n  {\n    \"message\": {\n      \"fee_recipient\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gas_limit\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"pubkey\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"<string>\"\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "4e0be84e-4305-4e6d-a8dd-d7670452ab13",
                            "name": "Registration information has been received.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "register_validator"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"fee_recipient\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gas_limit\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"pubkey\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"fee_recipient\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gas_limit\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"pubkey\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "43861a2c-ec68-4322-867a-9928d7db2eff",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "register_validator"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"fee_recipient\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gas_limit\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"pubkey\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"fee_recipient\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gas_limit\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"pubkey\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "f0e0f25e-79c3-49d4-a170-c8364d5ab844",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "register_validator"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"fee_recipient\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gas_limit\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"pubkey\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"fee_recipient\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"gas_limit\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"pubkey\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                }
            ],
            "event": []
        },
        {
            "id": "e438bd59-e301-440e-ad9b-1b59fb893a73",
            "name": "ValidatorRequiredApi",
            "description": {
                "content": "Minimal set of endpoints to enable a working validator implementation.\n\n[Checkout validator flow](./validator-flow.md) to learn how to use this api.\n",
                "type": "text/plain"
            },
            "item": [
                {
                    "id": "a47619a9-4c1d-4eb5-b550-31dc7f0de6ab",
                    "name": "Retrieve details of the chain's genesis.",
                    "request": {
                        "name": "Retrieve details of the chain's genesis.",
                        "description": {
                            "content": "Retrieve details of the chain's genesis which can be used to identify chain.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "genesis"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "f010f34c-0858-498f-9ef9-02fc5d0135cd",
                            "name": "Request successful",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "genesis"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"genesis_time\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"genesis_validators_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"genesis_fork_version\": \"0x00000000\"\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "50496a91-8bc5-4ef9-8659-9e104253afd4",
                            "name": "Chain genesis info is not yet known",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "genesis"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"aliqua\",\n  \"stacktraces\": [\n    \"of\",\n    \"par\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "fc07f03e-a33e-4935-b19c-4d6bc55b1b84",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "genesis"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "198ba73e-d0c4-4742-a518-65e3ac4a0085",
                    "name": "Get Fork object for requested state",
                    "request": {
                        "name": "Get Fork object for requested state",
                        "description": {
                            "content": "Returns [Fork](https://github.com/ethereum/consensus-specs/blob/v0.11.1/specs/phase0/beacon-chain.md#fork) object for state with given 'stateId'.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "states",
                                ":state_id",
                                "fork"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "state_id",
                                    "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "94bb6951-34e9-48c0-bf91-0d33f9e07ae6",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "fork"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": {\n    \"previous_version\": \"0x00000000\",\n    \"current_version\": \"0x00000000\",\n    \"epoch\": \"1\"\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "17eda4b7-d74e-4597-bf89-1e10ac7ce847",
                            "name": "Invalid state ID",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "fork"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "03d6afba-aaf8-458b-be6a-86dc9215b5e7",
                            "name": "State not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "fork"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "a32905a4-d853-4bf2-a196-86b9b6724c00",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "fork"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "2abd96b9-516c-44ef-847f-46ed8ac5290b",
                    "name": "Get validator from state by id",
                    "request": {
                        "name": "Get validator from state by id",
                        "description": {
                            "content": "Returns validator specified by state and id or public key along with status and balance.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "states",
                                ":state_id",
                                "validators",
                                ":validator_id"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "state_id",
                                    "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                },
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "validator_id",
                                    "description": "(Required) Either hex encoded public key (any bytes48 with 0x prefix) or validator index"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "42f00e63-b6b9-41ab-ba71-94251939f12f",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validators",
                                        ":validator_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "validator_id",
                                            "description": "(Required) Either hex encoded public key (any bytes48 with 0x prefix) or validator index"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": {\n    \"index\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"balance\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"status\": \"minim\",\n    \"validator\": {\n      \"pubkey\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"withdrawal_credentials\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"effective_balance\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"slashed\": false,\n      \"activation_eligibility_epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"activation_epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"exit_epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"withdrawable_epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "b76cf835-c870-43a4-9fa3-354fc692c196",
                            "name": "Invalid state or validator ID",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validators",
                                        ":validator_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "validator_id",
                                            "description": "(Required) Either hex encoded public key (any bytes48 with 0x prefix) or validator index"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "15c0000d-3126-4e58-8264-1a8442da9e9c",
                            "name": "Not Found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validators",
                                        ":validator_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "validator_id",
                                            "description": "(Required) Either hex encoded public key (any bytes48 with 0x prefix) or validator index"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"State not found\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "7168b8ad-447e-474a-a4c2-31be7000a4cf",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "states",
                                        ":state_id",
                                        "validators",
                                        ":validator_id"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "state_id",
                                            "description": "(Required) State identifier.\nCan be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x prefix\\>.\n"
                                        },
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "validator_id",
                                            "description": "(Required) Either hex encoded public key (any bytes48 with 0x prefix) or validator index"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "6feeb446-488a-47b0-ac19-8e913b759910",
                    "name": "Publish a signed block.",
                    "request": {
                        "name": "Publish a signed block.",
                        "description": {
                            "content": "Instructs the beacon node to use the components of the `SignedBlindedBeaconBlock` to construct and publish a \n`SignedBeaconBlock` by swapping out the `transactions_root` for the corresponding full list of `transactions`.\nThe beacon node should broadcast a newly constructed `SignedBeaconBlock` to the beacon network,\nto be included in the beacon chain. The beacon node is not required to validate the signed\n`BeaconBlock`, and a successful response (20X) only indicates that the broadcast has been\nsuccessful. The beacon node is expected to integrate the new block into its state, and\ntherefore validate the block internally, however blocks which fail the validation are still\nbroadcast but a different status code is returned (202). Pre-Bellatrix, this endpoint will accept \na `SignedBeaconBlock`.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "blinded_blocks"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "disabled": false,
                                "description": "Version of the block being submitted, if using SSZ encoding.",
                                "key": "Eth-Consensus-Version",
                                "value": "minim"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"message\": {\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"signature\": \"<string>\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "388abedd-8a10-4c1f-8ff4-098c215832ca",
                            "name": "The block was validated successfully and has been broadcast. It has also been integrated into the beacon node's database.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blinded_blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "disabled": false,
                                        "description": "Version of the block being submitted, if using SSZ encoding.",
                                        "key": "Eth-Consensus-Version",
                                        "value": "pariatur"
                                    }
                                ],
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"message\": {\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "5139f6a9-78b9-4135-a3f0-9cbde40d79b6",
                            "name": "The block failed validation, but was successfully broadcast anyway. It was not integrated into the beacon node's database.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blinded_blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "disabled": false,
                                        "description": "Version of the block being submitted, if using SSZ encoding.",
                                        "key": "Eth-Consensus-Version",
                                        "value": "pariatur"
                                    }
                                ],
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"message\": {\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Accepted",
                            "code": 202,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "9e3d83b6-cacb-4eef-a6d2-0ca6ccc17495",
                            "name": "The `SignedBlindedBeaconBlock` object is invalid",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blinded_blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "disabled": false,
                                        "description": "Version of the block being submitted, if using SSZ encoding.",
                                        "key": "Eth-Consensus-Version",
                                        "value": "pariatur"
                                    }
                                ],
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"message\": {\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "91e5921c-f42e-4b79-9fe9-76db49e9da3d",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blinded_blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "disabled": false,
                                        "description": "Version of the block being submitted, if using SSZ encoding.",
                                        "key": "Eth-Consensus-Version",
                                        "value": "pariatur"
                                    }
                                ],
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"message\": {\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "cf2ee7cb-5282-4fe9-b24c-454fea0f8c2b",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "blinded_blocks"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "header": [
                                    {
                                        "disabled": false,
                                        "description": "Version of the block being submitted, if using SSZ encoding.",
                                        "key": "Eth-Consensus-Version",
                                        "value": "pariatur"
                                    }
                                ],
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n  \"message\": {\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "98f32946-224e-4974-8881-c444a4b012ad",
                    "name": "Submit Attestation objects to node",
                    "request": {
                        "name": "Submit Attestation objects to node",
                        "description": {
                            "content": "Submits Attestation objects to the node.  Each attestation in the request body is processed individually.\n\nIf an attestation is validated successfully the node MUST publish that attestation on the appropriate subnet.\n\nIf one or more attestations fail validation the node MUST return a 400 error with details of which attestations have failed, and why.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "pool",
                                "attestations"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"aggregation_bits\": \"<string>\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  {\n    \"aggregation_bits\": \"<string>\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "f52ef4ea-cced-45d6-a508-c885c2a16cba",
                            "name": "Attestations are stored in pool and broadcast on appropriate subnet",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attestations"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "486a8bda-21f9-4695-b63f-1f47cda90e5e",
                            "name": "Errors with one or more attestations",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attestations"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"some failures\",\n  \"failures\": [\n    {\n      \"index\": 3,\n      \"message\": \"invalid signature\"\n    },\n    {\n      \"index\": 3,\n      \"message\": \"invalid signature\"\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "87710415-b8ed-4725-b1c5-9b926bd7aeef",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "attestations"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "bbf24b08-b5c8-4d19-93fd-875f113dfaeb",
                    "name": "Submit sync committee signatures to node",
                    "request": {
                        "name": "Submit sync committee signatures to node",
                        "description": {
                            "content": "Submits sync committee signature objects to the node.\n\nSync committee signatures are not present in phase0, but are required for Altair networks.\n\nIf a sync committee signature is validated successfully the node MUST publish that sync committee signature on all applicable subnets.\n\nIf one or more sync committee signatures fail validation the node MUST return a 400 error with details of which sync committee signatures have failed, and why.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "beacon",
                                "pool",
                                "sync_committees"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"slot\": \"<string>\",\n    \"beacon_block_root\": \"<string>\",\n    \"validator_index\": \"<string>\",\n    \"signature\": \"<string>\"\n  },\n  {\n    \"slot\": \"<string>\",\n    \"beacon_block_root\": \"<string>\",\n    \"validator_index\": \"<string>\",\n    \"signature\": \"<string>\"\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "b7441592-bae4-42c7-b073-1a986e7430f9",
                            "name": "Sync committee signatures are stored in pool and broadcast on appropriate subnet",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "sync_committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"slot\": \"1\",\n    \"beacon_block_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"validator_index\": \"1\",\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"slot\": \"1\",\n    \"beacon_block_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"validator_index\": \"1\",\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "5ac9e8ab-362a-4a9e-aa37-1fc0b9a001a6",
                            "name": "Errors with one or more sync committee signatures",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "sync_committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"slot\": \"1\",\n    \"beacon_block_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"validator_index\": \"1\",\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"slot\": \"1\",\n    \"beacon_block_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"validator_index\": \"1\",\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"some failures\",\n  \"failures\": [\n    {\n      \"index\": 3,\n      \"message\": \"invalid signature\"\n    },\n    {\n      \"index\": 3,\n      \"message\": \"invalid signature\"\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "280546fd-64fe-47a2-8c47-87f22459eabe",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "beacon",
                                        "pool",
                                        "sync_committees"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"slot\": \"1\",\n    \"beacon_block_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"validator_index\": \"1\",\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"slot\": \"1\",\n    \"beacon_block_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n    \"validator_index\": \"1\",\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "7bc4ab6e-9d57-40b3-8f45-eebbec4d3e16",
                    "name": "Get node syncing status",
                    "request": {
                        "name": "Get node syncing status",
                        "description": {
                            "content": "Requests the beacon node to describe if it's currently syncing or not, and if it is, what block it is up to.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "node",
                                "syncing"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "ca074179-dcfa-4b45-ab4a-b0f1f9e3c339",
                            "name": "Request successful",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "syncing"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"head_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"sync_distance\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_syncing\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_optimistic\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "ce31b5c8-e3e1-4506-80fb-866f6371315a",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "node",
                                        "syncing"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "81a81eaf-19c9-4ac1-aecd-3d646ca31431",
                    "name": "Get spec params.",
                    "request": {
                        "name": "Get spec params.",
                        "description": {
                            "content": "Retrieve specification configuration used on this node.  The configuration should include:\n  - Constants for all hard forks known by the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#constants) and [altair](https://github.com/ethereum/consensus-specs/blob/dev/specs/altair/beacon-chain.md#constants) values\n  - Presets for all hard forks supplied to the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/dev/presets/mainnet/phase0.yaml) and [altair](https://github.com/ethereum/consensus-specs/blob/dev/presets/mainnet/altair.yaml) values\n  - Configuration for the beacon node, for example the [mainnet](https://github.com/ethereum/consensus-specs/blob/dev/configs/mainnet.yaml) values\n\nValues are returned with following format:\n  - any value starting with 0x in the spec is returned as a hex string\n  - numeric values are returned as a quoted integer\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "config",
                                "spec"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "21e5f5e6-8adf-4331-b206-022b4f9fb1b2",
                            "name": "Success",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "config",
                                        "spec"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"DEPOSIT_CONTRACT_ADDRESS\": \"0x00000000219ab540356cBB839Cbe05303d7705Fa\",\n  \"DEPOSIT_NETWORK_ID\": \"1\",\n  \"DOMAIN_AGGREGATE_AND_PROOF\": \"0x06000000\",\n  \"INACTIVITY_PENALTY_QUOTIENT\": \"67108864\",\n  \"INACTIVITY_PENALTY_QUOTIENT_ALTAIR\": \"50331648\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "e6d0a2d3-cb12-46bd-b20f-ba530ea739f1",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "config",
                                        "spec"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "4689034d-02f4-41c0-a0c0-caca5b4cc6ff",
                    "name": "Get attester duties",
                    "request": {
                        "name": "Get attester duties",
                        "description": {
                            "content": "Requests the beacon node to provide a set of attestation duties, which should be performed by validators, for a particular epoch.\nDuties should only need to be checked once per epoch, however a chain reorganization (of > MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:\n- event.previous_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`\n- event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) + 1 == epoch`\n- event.block otherwise\n\nThe dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch - 1) - 1)` or the genesis block root in the case of underflow.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "duties",
                                "attester",
                                ":epoch"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "epoch",
                                    "description": "(Required) Should only be allowed 1 epoch ahead"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  \"<string>\",\n  \"<string>\"\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "e7191cc7-c48c-4a0b-b6ba-ab3ed4f479a1",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "attester",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) Should only be allowed 1 epoch ahead"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"dependent_root\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": [\n    {\n      \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n      \"validator_index\": {},\n      \"committee_index\": {},\n      \"committee_length\": {},\n      \"committees_at_slot\": {},\n      \"validator_committee_index\": {},\n      \"slot\": {}\n    },\n    {\n      \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n      \"validator_index\": {},\n      \"committee_index\": {},\n      \"committee_length\": {},\n      \"committees_at_slot\": {},\n      \"validator_committee_index\": {},\n      \"slot\": {}\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "15ada4dc-db55-48d6-aa3b-d89a2471bf57",
                            "name": "Invalid epoch or index",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "attester",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) Should only be allowed 1 epoch ahead"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "2753c072-a4b5-40f4-b995-786ccaa57a83",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "attester",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) Should only be allowed 1 epoch ahead"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "80fe1777-4945-4629-9a1e-a49ceafc0aad",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "attester",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) Should only be allowed 1 epoch ahead"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "984b215e-5ce7-441d-a079-fb382081991c",
                    "name": "Get block proposers duties",
                    "request": {
                        "name": "Get block proposers duties",
                        "description": {
                            "content": "Request beacon node to provide all validators that are scheduled to propose a block in the given epoch.\nDuties should only need to be checked once per epoch, however a chain reorganization could occur that results in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:\n- event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`\n- event.block otherwise\n\nThe dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch) - 1)` or the genesis block root in the case of underflow.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "duties",
                                "proposer",
                                ":epoch"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "epoch",
                                    "description": "(Required) "
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "0daff1ee-dd0e-4f72-8115-212b3496e47c",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "proposer",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) "
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"dependent_root\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": [\n    {\n      \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n      \"validator_index\": {},\n      \"slot\": {}\n    },\n    {\n      \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n      \"validator_index\": {},\n      \"slot\": {}\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "341efd2e-df20-4826-951e-5e1714ea2e47",
                            "name": "Invalid epoch",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "proposer",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) "
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "9a618d8c-4145-43e9-bc60-5da6c310a7a9",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "proposer",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) "
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "eec74d2f-6551-44a1-a99a-dc4dc29e395b",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "proposer",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) "
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "94e7d98e-d1ea-49c1-a9fc-520fd07cfb56",
                    "name": "Get sync committee duties",
                    "request": {
                        "name": "Get sync committee duties",
                        "description": {
                            "content": "Requests the beacon node to provide a set of sync committee duties for a particular epoch.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "duties",
                                "sync",
                                ":epoch"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "epoch",
                                    "description": "(Required) epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1"
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  \"<string>\",\n  \"<string>\"\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "b552dfd9-9f1d-42df-ae70-e7ed3da1b1ac",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "sync",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"execution_optimistic\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"data\": [\n    {\n      \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n      \"validator_index\": {},\n      \"validator_sync_committee_indices\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    {\n      \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n      \"validator_index\": {},\n      \"validator_sync_committee_indices\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "e401ac40-f36d-4e53-bc8b-8f9d65480168",
                            "name": "Invalid epoch or index",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "sync",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "c80de662-48a2-4db0-b218-f5a35df29802",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "sync",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "24ab2a8d-09cb-46c0-8d4a-741bb94b78a7",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "duties",
                                        "sync",
                                        ":epoch"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "epoch",
                                            "description": "(Required) epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1"
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  \"1\",\n  \"1\"\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "be974c82-9f03-4939-9ee0-57664e30dfea",
                    "name": "Produce a new block, without signature.",
                    "request": {
                        "name": "Produce a new block, without signature.",
                        "description": {
                            "content": "Requests a beacon node to produce a valid block, which can then be signed by a validator.\n\n__NOTE__: Supports only phase0 blocks.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "blocks",
                                ":slot"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "randao_reveal",
                                    "value": "<string>",
                                    "description": "(Required) The validator's randao reveal value."
                                },
                                {
                                    "disabled": false,
                                    "key": "graffiti",
                                    "value": "<hex>",
                                    "description": "Arbitrary data validator wants to include in block."
                                }
                            ],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "slot",
                                    "description": "(Required) The slot for which the block should be proposed."
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "e171c9b5-18f2-4c16-be00-270b38b47517",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"slot\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"proposer_index\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"parent_root\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"state_root\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"body\": {\n      \"randao_reveal\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"eth1_data\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"graffiti\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"proposer_slashings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attester_slashings\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"attestations\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"deposits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"voluntary_exits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "9efccc07-d13b-47a2-81e9-74cee03948e0",
                            "name": "Invalid block production request",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"Invalid request to produce a block\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "082ec519-59a5-428c-af21-e539e6f943b5",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "79662dcc-982d-439e-97a3-15f5db27bad7",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "d9dcd125-da78-4a7f-9c69-e1e8c85b3c9e",
                    "name": "Produce a new block, without signature.",
                    "request": {
                        "name": "Produce a new block, without signature.",
                        "description": {
                            "content": "Requests a beacon node to produce a valid block, which can then be signed by a validator.\n\nMetadata in the response indicates the type of block produced, and the supported types of block\nwill be added to as forks progress.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v2",
                                "validator",
                                "blocks",
                                ":slot"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "randao_reveal",
                                    "value": "<string>",
                                    "description": "(Required) The validator's randao reveal value."
                                },
                                {
                                    "disabled": false,
                                    "key": "graffiti",
                                    "value": "<hex>",
                                    "description": "Arbitrary data validator wants to include in block."
                                }
                            ],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "slot",
                                    "description": "(Required) The slot for which the block should be proposed."
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "1587ff3d-7d31-456c-944c-949212596a9b",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "disabled": false,
                                    "description": "(Required) Required in response so client can deserialize returned json or ssz data more effectively.",
                                    "key": "Eth-Consensus-Version",
                                    "value": "pariatur"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"version\": \"phase0\",\n  \"data\": {\n    \"slot\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"proposer_index\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"parent_root\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"state_root\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "c89d20e5-f960-4c06-a6a7-884152c6948c",
                            "name": "Invalid block production request",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"Invalid request to produce a block\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "9795c393-20a5-4723-be06-84d08c8f3e89",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "e840f6d3-27a0-4c07-a11e-79d68857c62f",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v2",
                                        "validator",
                                        "blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "d6dc37fe-396a-449d-8559-a9fa25635a45",
                    "name": "Produce a new blinded block, without signature.",
                    "request": {
                        "name": "Produce a new blinded block, without signature.",
                        "description": {
                            "content": "Requests a beacon node to produce a valid blinded block, which can then be signed by a validator. \nA blinded block is a block with only a transactions root, rather than a full transactions list.\n\nMetadata in the response indicates the type of block produced, and the supported types of block\nwill be added to as forks progress.\n\nPre-Bellatrix, this endpoint will return a `BeaconBlock`.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "blinded_blocks",
                                ":slot"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "randao_reveal",
                                    "value": "<string>",
                                    "description": "(Required) The validator's randao reveal value."
                                },
                                {
                                    "disabled": false,
                                    "key": "graffiti",
                                    "value": "<hex>",
                                    "description": "Arbitrary data validator wants to include in block."
                                }
                            ],
                            "variable": [
                                {
                                    "disabled": false,
                                    "type": "any",
                                    "value": "<string>",
                                    "key": "slot",
                                    "description": "(Required) The slot for which the block should be proposed."
                                },
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "9055a881-aa99-48cb-b323-5b9f0f671544",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blinded_blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "disabled": false,
                                    "description": "(Required) Required in response so client can deserialize returned json or ssz data more effectively.",
                                    "key": "Eth-Consensus-Version",
                                    "value": "pariatur"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"version\": \"bellatrix\",\n  \"data\": {\n    \"slot\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"proposer_index\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"parent_root\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"state_root\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"body\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "233e28df-e1da-4d69-9749-ed997e9b7dc0",
                            "name": "Invalid block production request",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blinded_blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"Invalid request to produce a block\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "25f4d4a5-8f7c-48cf-b0e3-27cf316e03d0",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blinded_blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "d95ce918-d5cb-4c24-85ec-d6e3ed8fdb13",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "blinded_blocks",
                                        ":slot"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "randao_reveal",
                                            "value": "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505"
                                        },
                                        {
                                            "key": "graffiti",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "disabled": false,
                                            "type": "any",
                                            "value": "<string>",
                                            "key": "slot",
                                            "description": "(Required) The slot for which the block should be proposed."
                                        },
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "1326c1dc-53ae-4bfc-836c-4c0b859d8141",
                    "name": "Produce an attestation data",
                    "request": {
                        "name": "Produce an attestation data",
                        "description": {
                            "content": "Requests that the beacon node produce an AttestationData.\n\nA 503 error must be returned if the block identified by the response\n`beacon_block_root` is optimistic (i.e. the attestation attests to a block\nthat has not been fully verified by an execution engine).\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "attestation_data"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "slot",
                                    "value": "<string>",
                                    "description": "(Required) The slot for which an attestation data should be created."
                                },
                                {
                                    "disabled": false,
                                    "key": "committee_index",
                                    "value": "<string>",
                                    "description": "(Required) The committee index for which an attestation data should be created."
                                }
                            ],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "4eeeeb0a-7eaa-4672-a08c-d4b986639a8d",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "attestation_data"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "committee_index",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"slot\": \"1\",\n    \"index\": \"1\",\n    \"beacon_block_root\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"source\": {\n      \"epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"target\": {\n      \"epoch\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "7b9d9a1b-65cb-4410-b30b-45961fcb066e",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "attestation_data"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "committee_index",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aute dolore\",\n  \"stacktraces\": [\n    \"Ut Lorem do mollit\",\n    \"sit nisi dolor\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "71e5a97d-d29b-42ed-aa59-c5fbb18d5918",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "attestation_data"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "committee_index",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "64a4d0ba-d75c-4997-98a1-31980852d1cc",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "attestation_data"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "committee_index",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "63e727a7-7b4b-41ad-949e-ce1e11f5d2dd",
                    "name": "Get aggregated attestation",
                    "request": {
                        "name": "Get aggregated attestation",
                        "description": {
                            "content": "Aggregates all attestations matching given attestation data root and slot.\n\nA 503 error must be returned if the block identified by the response\n`beacon_block_root` is optimistic (i.e. the aggregated attestation attests\nto a block that has not been fully verified by an execution engine).\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "aggregate_attestation"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "attestation_data_root",
                                    "value": "<string>",
                                    "description": "(Required) HashTreeRoot of AttestationData that validator wants aggregated"
                                },
                                {
                                    "disabled": false,
                                    "key": "slot",
                                    "value": "<string>",
                                    "description": "(Required) "
                                }
                            ],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "cda6c371-1124-43f1-ae57-44c332681211",
                            "name": "Returns aggregated `Attestation` object with same `AttestationData` root.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_attestation"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "attestation_data_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        },
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"aggregation_bits\": \"0x01\",\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"data\": {\n      \"slot\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"beacon_block_root\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"source\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "6288ac5e-5682-4a43-af67-3d30d7a64a03",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_attestation"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "attestation_data_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        },
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "fb51ce6e-85f7-4720-9706-5c10003b9e7a",
                            "name": "Not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_attestation"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "attestation_data_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        },
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"Requested item not found\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "13d6bb42-5e49-4cea-af90-38fb7c29331a",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_attestation"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "attestation_data_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        },
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "0dcff183-43b4-4fe8-895f-e278151ba891",
                    "name": "Publish multiple aggregate and proofs",
                    "request": {
                        "name": "Publish multiple aggregate and proofs",
                        "description": {
                            "content": "Verifies given aggregate and proofs and publishes them on appropriate gossipsub topic.",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "aggregate_and_proofs"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"<string>\"\n  },\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"<string>\"\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "8cfc86d5-5e72-41c1-b227-5c72f237ca9b",
                            "name": "Successful response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_and_proofs"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "5389e497-0155-4a81-9d95-708e4567d43f",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_and_proofs"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "173eb5b6-869b-4716-bcb8-cd1f414dd27a",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "aggregate_and_proofs"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "d2886fc4-3de5-4c24-a04f-fd8924861be5",
                    "name": "Signal beacon node to prepare for a committee subnet",
                    "request": {
                        "name": "Signal beacon node to prepare for a committee subnet",
                        "description": {
                            "content": "After beacon node receives this request,\nsearch using discv5 for peers related to this subnet\nand replace current peers with those ones if necessary\nIf validator `is_aggregator`, beacon node must:\n- announce subnet topic subscription on gossipsub\n- aggregate attestations received on that subnet\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "beacon_committee_subscriptions"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"validator_index\": \"<string>\",\n    \"committee_index\": \"<string>\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  },\n  {\n    \"validator_index\": \"<string>\",\n    \"committee_index\": \"<string>\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "7643248f-7acd-4676-b490-d63c1f6845b9",
                            "name": "Slot signature is valid and beacon node has prepared the attestation subnet.\n\nNote that we cannot be certain the Beacon node will find peers for that subnet for various reasons.\n",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "beacon_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "21c74768-f411-4699-bf68-b3c312344592",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "beacon_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "85743e71-366d-4e66-ab9e-22c182b98681",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "beacon_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "f388b8f8-f903-4734-a9a5-1ceb730d19bd",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "beacon_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"committee_index\": \"1\",\n    \"committees_at_slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"is_aggregator\": \"<boolean>\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "d9b26544-800f-4516-b225-aee34eee7c49",
                    "name": "Subscribe to sync committee subnets",
                    "request": {
                        "name": "Subscribe to sync committee subnets",
                        "description": {
                            "content": "Subscribe to a number of sync committee subnets\n\nSync committees are not present in phase0, but are required for Altair networks.\n\nSubscribing to sync committee subnets is an action performed by VC to enable network participation in Altair networks, and only required if the VC has an active validator in an active sync committee.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "sync_committee_subscriptions"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"validator_index\": \"<string>\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  },\n  {\n    \"validator_index\": \"<string>\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "06e84918-474a-4525-b02d-7e0a8aa0fe59",
                            "name": "Successful response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  },\n  {\n    \"validator_index\": \"1\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "5362b571-a7b9-4699-808f-98bff7b42385",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  },\n  {\n    \"validator_index\": \"1\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "29a17ef2-b726-4b9a-b261-c7c11ab174e4",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_subscriptions"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  },\n  {\n    \"validator_index\": \"1\",\n    \"sync_committee_indices\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"until_epoch\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "8846e497-db85-4229-8543-1f645031775d",
                    "name": "Produce a sync committee contribution",
                    "request": {
                        "name": "Produce a sync committee contribution",
                        "description": {
                            "content": "Requests that the beacon node produce a sync committee contribution.\n\nA 503 error must be returned if the block identified by the response\n`beacon_block_root` is optimistic (i.e. the sync committee contribution\nrefers to a block that has not been fully verified by an execution engine).\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "sync_committee_contribution"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "slot",
                                    "value": "<string>",
                                    "description": "(Required) The slot for which a sync committee contribution should be created."
                                },
                                {
                                    "disabled": false,
                                    "key": "subcommittee_index",
                                    "value": "<string>",
                                    "description": "(Required) the subcommittee index for which to produce the contribution."
                                },
                                {
                                    "disabled": false,
                                    "key": "beacon_block_root",
                                    "value": "<string>",
                                    "description": "(Required) the block root for which to produce the contribution."
                                }
                            ],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "769aad64-8591-495c-9f58-3d99761e5310",
                            "name": "Success response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_contribution"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "subcommittee_index",
                                            "value": "1"
                                        },
                                        {
                                            "key": "beacon_block_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"data\": {\n    \"slot\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"beacon_block_root\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"subcommittee_index\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"aggregation_bits\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"signature\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    }\n  }\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "eff593b8-fd80-425b-b841-11097c0a4945",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_contribution"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "subcommittee_index",
                                            "value": "1"
                                        },
                                        {
                                            "key": "beacon_block_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "0b34e707-e09a-4e7f-b364-66043f8104d1",
                            "name": "Not found",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_contribution"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "subcommittee_index",
                                            "value": "1"
                                        },
                                        {
                                            "key": "beacon_block_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Not Found",
                            "code": 404,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"Requested item not found\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "5891f64b-33ee-4a82-bb36-7f127877b8ce",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_contribution"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "subcommittee_index",
                                            "value": "1"
                                        },
                                        {
                                            "key": "beacon_block_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "a0064ad2-3a23-4fbc-bb03-1e0ee881186f",
                            "name": "Beacon node is currently syncing, try again later.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "sync_committee_contribution"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "slot",
                                            "value": "1"
                                        },
                                        {
                                            "key": "subcommittee_index",
                                            "value": "1"
                                        },
                                        {
                                            "key": "beacon_block_root",
                                            "value": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Service Unavailable",
                            "code": 503,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 503,\n  \"message\": \"Beacon node is currently syncing and not serving request on that endpoint\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                },
                {
                    "id": "a01fe33b-38ae-4131-b9d5-af8b991fc1b2",
                    "name": "Publish multiple contribution and proofs",
                    "request": {
                        "name": "Publish multiple contribution and proofs",
                        "description": {
                            "content": "Publish multiple signed sync committee contribution and proofs",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "contribution_and_proofs"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"<string>\"\n  },\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"<string>\"\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "ab964506-fc5a-4db3-a7c6-e1347e202a4f",
                            "name": "Successful response",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "contribution_and_proofs"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "3f9efdfb-bc6c-4e79-91a9-f70661f66333",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "contribution_and_proofs"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "e53089db-50db-4fd5-985f-c58e0de153ab",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "contribution_and_proofs"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  },\n  {\n    \"message\": {\n      \"aggregator_index\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"selection_proof\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"contribution\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "e7155f29-102a-4d5c-8642-a80b7fd5a89f",
                    "name": "Provide beacon node with proposals for the given validators.",
                    "request": {
                        "name": "Provide beacon node with proposals for the given validators.",
                        "description": {
                            "content": "Prepares the beacon node for potential proposers by supplying information\nrequired when proposing blocks for the given validators.  The information\nsupplied for each validator index will persist through the epoch in which\nthe call is submitted and for a further two epochs after that, or until the\nbeacon node restarts.  It is expected that validator clients will send this\ninformation periodically, for example each epoch, to ensure beacon nodes have\ncorrect and timely fee recipient information.\n\nNote that there is no guarantee that the beacon node will use the supplied fee\nrecipient when creating a block proposal, so on receipt of a proposed block the\nvalidator should confirm that it finds the fee recipient within the block\nacceptable before signing it.\n\nAlso note that requests containing currently inactive or unknown validator\nindices will be accepted, as they may become active at a later epoch.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "validator",
                                "prepare_beacon_proposer"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                            "mode": "raw",
                            "raw": "[\n  {\n    \"validator_index\": \"<string>\",\n    \"fee_recipient\": \"<string>\"\n  },\n  {\n    \"validator_index\": \"<string>\",\n    \"fee_recipient\": \"<string>\"\n  }\n]",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        }
                    },
                    "response": [
                        {
                            "id": "bfa41ee4-99ba-46f9-a507-9315688eed24",
                            "name": "Preparation information has been received.\n",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "prepare_beacon_proposer"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/plain"
                                }
                            ],
                            "body": "",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "dbbba832-6d04-48cb-ac81-7973e8be8337",
                            "name": "Invalid request syntax.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "prepare_beacon_proposer"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 400,\n  \"message\": \"aliquip non ex nostrud in\",\n  \"stacktraces\": [\n    \"sed fugiat dolore\",\n    \"ea ipsum do\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "b8fae044-3e6a-4ea3-bf87-36afa755f903",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "validator",
                                        "prepare_beacon_proposer"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "body": {
                                    "mode": "raw",
                                    "raw": "[\n  {\n    \"validator_index\": \"1\",\n    \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\"\n  },\n  {\n    \"validator_index\": \"1\",\n    \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\"\n  }\n]",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                }
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": [],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    }
                },
                {
                    "id": "0e1c7b71-1028-4865-a817-5866f5874c1e",
                    "name": "Subscribe to beacon node events",
                    "request": {
                        "name": "Subscribe to beacon node events",
                        "description": {
                            "content": "Provides endpoint to subscribe to beacon node Server-Sent-Events stream.\nConsumers should use [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)\nimplementation to listen on those events.\n\nServers _may_ send SSE comments beginning with `:` for any purpose, including to keep the\nevent stream connection alive in the presence of proxy servers.\n",
                            "type": "text/plain"
                        },
                        "url": {
                            "path": [
                                "eth",
                                "v1",
                                "events"
                            ],
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "query": [
                                {
                                    "disabled": false,
                                    "key": "topics",
                                    "value": "<string>",
                                    "description": "(Required) Event types to subscribe to"
                                },
                                {
                                    "disabled": false,
                                    "key": "topics",
                                    "value": "<string>",
                                    "description": "(Required) Event types to subscribe to"
                                }
                            ],
                            "variable": [
                                {
                                    "description": "Beacon node API url",
                                    "type": "any",
                                    "value": "{{server_url}}",
                                    "key": "server_url"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Accept",
                                "value": "text/event-stream"
                            }
                        ],
                        "method": "GET",
                        "auth": null
                    },
                    "response": [
                        {
                            "id": "146a280c-ea7b-4587-9015-9d42d88c3136",
                            "name": "Opened SSE stream.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "events"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "topics",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "topics",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "text/event-stream"
                                }
                            ],
                            "body": "event: head\ndata: {\"slot\":\"10\", \"block\":\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\", \"state\":\"0x600e852a08c1200654ddf11025f1ceacb3c2e74bdd5c630cde0838b2591b69f9\", \"epoch_transition\":false, \"previous_duty_dependent_root\":\"0x5e0043f107cb57913498fbf2f99ff55e730bf1e151f02f221e977c91a90a0e91\", \"current_duty_dependent_root\":\"0x5e0043f107cb57913498fbf2f99ff55e730bf1e151f02f221e977c91a90a0e91\", \"execution_optimistic\": false}\n",
                            "cookie": [],
                            "_postman_previewlanguage": "text"
                        },
                        {
                            "id": "8c696430-3f1f-4b49-97fd-416b940dbb22",
                            "name": "The topics supplied could not be parsed",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "events"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "topics",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "topics",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 404,\n  \"message\": \"ut do\",\n  \"stacktraces\": [\n    \"officia \",\n    \"consectetur in adipisicing consequat\"\n  ]\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        },
                        {
                            "id": "b2022418-62cd-488b-a6d2-890ca5c75e32",
                            "name": "Beacon node internal error.",
                            "originalRequest": {
                                "url": {
                                    "path": [
                                        "eth",
                                        "v1",
                                        "events"
                                    ],
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "topics",
                                            "value": "<string>"
                                        },
                                        {
                                            "key": "topics",
                                            "value": "<string>"
                                        }
                                    ],
                                    "variable": [
                                        {
                                            "description": "Beacon node API url",
                                            "type": "any",
                                            "value": "{{server_url}}",
                                            "key": "server_url"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "body": {}
                            },
                            "status": "Internal Server Error",
                            "code": 500,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": "{\n  \"code\": 500,\n  \"message\": \"Internal server error\"\n}",
                            "cookie": [],
                            "_postman_previewlanguage": "json"
                        }
                    ],
                    "event": []
                }
            ],
            "event": []
        }
    ],
    "event": [],
    "variable": [
        {
            "description": {
                "content": "Beacon node API url",
                "type": "text/plain"
            },
            "type": "any",
            "value": "http://public-mainnet-node.ethereum.org/",
            "key": "server_url"
        },
        {
            "type": "string",
            "value": "{{server_url}}",
            "key": "baseUrl"
        }
    ],
    "info": {
        "_postman_id": "a9ea9beb-d51e-4d19-8361-44bf74ebf49a",
        "name": "Eth Beacon Node API",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "description": {
            "content": "API specification for the beacon node, which enables users to query and participate in Ethereum 2.0 phase 0 beacon chain.\n\nAll requests by default send and receive JSON, and as such should have either or both of the \"Content-Type: application/json\"\nand \"Accept: application/json\" headers.  In addition, some requests can return data in the SSZ format.  To indicate that SSZ\ndata is required in response to a request the header \"Accept: application/octet-stream\" should be sent.  Note that only a subset\nof requests can respond with data in SSZ format; these are noted in each individual request.\n\nAPI endpoints are individually versioned.  As such, there is no direct relationship between all v1 endpoints, all v2 endpoints,\n_etc._ and no such relationship should be inferred.  All JSON responses return the requested data under a `data` key in the top\nlevel of their response.  Additional metadata may or may not be present in other keys at the top level of the response, dependent\non the endpoint.  The rules that require an increase in version number are as follows:\n\n  - no field that is listed in an endpoint shall be removed without an increase in the version number\n  - no field that is listed in an endpoint shall be altered in terms of format (_e.g._ from a string to an array) without an\n    increase in the version number\n\nNote that it is possible for a field to be added to an endpoint's data or metadata without an increase in the version number.\n\n\nContact Support:\n Name: Ethereum Github",
            "type": "text/plain"
        }
    }
}